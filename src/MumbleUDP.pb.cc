// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MumbleUDP.proto

#include "MumbleUDP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace MumbleUDP {
class AudioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Audio>
      _instance;
  ::google::protobuf::uint32 target_;
  ::google::protobuf::uint32 context_;
} _Audio_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ping>
      _instance;
} _Ping_default_instance_;
}  // namespace MumbleUDP
namespace protobuf_MumbleUDP_2eproto {
static void InitDefaultsAudio() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleUDP::_Audio_default_instance_;
    new (ptr) ::MumbleUDP::Audio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleUDP::Audio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Audio =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAudio}, {}};

static void InitDefaultsPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleUDP::_Ping_default_instance_;
    new (ptr) ::MumbleUDP::Ping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleUDP::Ping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPing}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Audio.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ping.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MumbleUDP::AudioDefaultTypeInternal, target_),
  offsetof(::MumbleUDP::AudioDefaultTypeInternal, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, sender_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, frame_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, opus_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, positional_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, volume_adjustment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, is_terminator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Audio, Header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, request_extended_information_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, server_version_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, user_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, max_user_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleUDP::Ping, max_bandwidth_per_user_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MumbleUDP::Audio)},
  { 14, -1, sizeof(::MumbleUDP::Ping)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleUDP::_Audio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleUDP::_Ping_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MumbleUDP.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017MumbleUDP.proto\022\tMumbleUDP\"\302\001\n\005Audio\022\020"
      "\n\006target\030\001 \001(\rH\000\022\021\n\007context\030\002 \001(\rH\000\022\026\n\016s"
      "ender_session\030\003 \001(\r\022\024\n\014frame_number\030\004 \001("
      "\004\022\021\n\topus_data\030\005 \001(\014\022\027\n\017positional_data\030"
      "\006 \003(\002\022\031\n\021volume_adjustment\030\007 \001(\002\022\025\n\ris_t"
      "erminator\030\020 \001(\010B\010\n\006Header\"\246\001\n\004Ping\022\021\n\tti"
      "mestamp\030\001 \001(\004\022$\n\034request_extended_inform"
      "ation\030\002 \001(\010\022\031\n\021server_version_v2\030\003 \001(\004\022\022"
      "\n\nuser_count\030\004 \001(\r\022\026\n\016max_user_count\030\005 \001"
      "(\r\022\036\n\026max_bandwidth_per_user\030\006 \001(\rB\002H\001b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MumbleUDP.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MumbleUDP_2eproto
namespace MumbleUDP {

// ===================================================================

void Audio::InitAsDefaultInstance() {
  ::MumbleUDP::_Audio_default_instance_.target_ = 0u;
  ::MumbleUDP::_Audio_default_instance_.context_ = 0u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Audio::kTargetFieldNumber;
const int Audio::kContextFieldNumber;
const int Audio::kSenderSessionFieldNumber;
const int Audio::kFrameNumberFieldNumber;
const int Audio::kOpusDataFieldNumber;
const int Audio::kPositionalDataFieldNumber;
const int Audio::kVolumeAdjustmentFieldNumber;
const int Audio::kIsTerminatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Audio::Audio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MumbleUDP_2eproto::scc_info_Audio.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleUDP.Audio)
}
Audio::Audio(const Audio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      positional_data_(from.positional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opus_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opus_data().size() > 0) {
    opus_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opus_data_);
  }
  ::memcpy(&frame_number_, &from.frame_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_terminator_) -
    reinterpret_cast<char*>(&frame_number_)) + sizeof(is_terminator_));
  clear_has_Header();
  switch (from.Header_case()) {
    case kTarget: {
      set_target(from.target());
      break;
    }
    case kContext: {
      set_context(from.context());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MumbleUDP.Audio)
}

void Audio::SharedCtor() {
  opus_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_terminator_) -
      reinterpret_cast<char*>(&frame_number_)) + sizeof(is_terminator_));
  clear_has_Header();
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:MumbleUDP.Audio)
  SharedDtor();
}

void Audio::SharedDtor() {
  opus_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Header()) {
    clear_Header();
  }
}

void Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Audio::descriptor() {
  ::protobuf_MumbleUDP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MumbleUDP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Audio& Audio::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MumbleUDP_2eproto::scc_info_Audio.base);
  return *internal_default_instance();
}


void Audio::clear_Header() {
// @@protoc_insertion_point(one_of_clear_start:MumbleUDP.Audio)
  switch (Header_case()) {
    case kTarget: {
      // No need to clear
      break;
    }
    case kContext: {
      // No need to clear
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HEADER_NOT_SET;
}


void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleUDP.Audio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positional_data_.Clear();
  opus_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_terminator_) -
      reinterpret_cast<char*>(&frame_number_)) + sizeof(is_terminator_));
  clear_Header();
  _internal_metadata_.Clear();
}

bool Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleUDP.Audio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_Header();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Header_.target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 context = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_Header();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Header_.context_)));
          set_has_context();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sender_session = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frame_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes opus_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opus_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float positional_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_positional_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_positional_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float volume_adjustment = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_adjustment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_terminator = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_terminator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleUDP.Audio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleUDP.Audio)
  return false;
#undef DO_
}

void Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleUDP.Audio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target(), output);
  }

  // uint32 context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->context(), output);
  }

  // uint32 sender_session = 3;
  if (this->sender_session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sender_session(), output);
  }

  // uint64 frame_number = 4;
  if (this->frame_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->frame_number(), output);
  }

  // bytes opus_data = 5;
  if (this->opus_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->opus_data(), output);
  }

  // repeated float positional_data = 6;
  if (this->positional_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _positional_data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->positional_data().data(), this->positional_data_size(), output);
  }

  // float volume_adjustment = 7;
  if (this->volume_adjustment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->volume_adjustment(), output);
  }

  // bool is_terminator = 16;
  if (this->is_terminator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_terminator(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleUDP.Audio)
}

::google::protobuf::uint8* Audio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleUDP.Audio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target(), target);
  }

  // uint32 context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->context(), target);
  }

  // uint32 sender_session = 3;
  if (this->sender_session() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sender_session(), target);
  }

  // uint64 frame_number = 4;
  if (this->frame_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->frame_number(), target);
  }

  // bytes opus_data = 5;
  if (this->opus_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->opus_data(), target);
  }

  // repeated float positional_data = 6;
  if (this->positional_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _positional_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->positional_data_, target);
  }

  // float volume_adjustment = 7;
  if (this->volume_adjustment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->volume_adjustment(), target);
  }

  // bool is_terminator = 16;
  if (this->is_terminator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_terminator(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleUDP.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleUDP.Audio)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float positional_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->positional_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _positional_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes opus_data = 5;
  if (this->opus_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->opus_data());
  }

  // uint64 frame_number = 4;
  if (this->frame_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frame_number());
  }

  // uint32 sender_session = 3;
  if (this->sender_session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sender_session());
  }

  // float volume_adjustment = 7;
  if (this->volume_adjustment() != 0) {
    total_size += 1 + 4;
  }

  // bool is_terminator = 16;
  if (this->is_terminator() != 0) {
    total_size += 2 + 1;
  }

  switch (Header_case()) {
    // uint32 target = 1;
    case kTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
      break;
    }
    // uint32 context = 2;
    case kContext: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Audio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleUDP.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  const Audio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Audio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleUDP.Audio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleUDP.Audio)
    MergeFrom(*source);
  }
}

void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleUDP.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positional_data_.MergeFrom(from.positional_data_);
  if (from.opus_data().size() > 0) {

    opus_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opus_data_);
  }
  if (from.frame_number() != 0) {
    set_frame_number(from.frame_number());
  }
  if (from.sender_session() != 0) {
    set_sender_session(from.sender_session());
  }
  if (from.volume_adjustment() != 0) {
    set_volume_adjustment(from.volume_adjustment());
  }
  if (from.is_terminator() != 0) {
    set_is_terminator(from.is_terminator());
  }
  switch (from.Header_case()) {
    case kTarget: {
      set_target(from.target());
      break;
    }
    case kContext: {
      set_context(from.context());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
}

void Audio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleUDP.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleUDP.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::Swap(Audio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Audio::InternalSwap(Audio* other) {
  using std::swap;
  positional_data_.InternalSwap(&other->positional_data_);
  opus_data_.Swap(&other->opus_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_number_, other->frame_number_);
  swap(sender_session_, other->sender_session_);
  swap(volume_adjustment_, other->volume_adjustment_);
  swap(is_terminator_, other->is_terminator_);
  swap(Header_, other->Header_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Audio::GetMetadata() const {
  protobuf_MumbleUDP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MumbleUDP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimestampFieldNumber;
const int Ping::kRequestExtendedInformationFieldNumber;
const int Ping::kServerVersionV2FieldNumber;
const int Ping::kUserCountFieldNumber;
const int Ping::kMaxUserCountFieldNumber;
const int Ping::kMaxBandwidthPerUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MumbleUDP_2eproto::scc_info_Ping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleUDP.Ping)
}
Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bandwidth_per_user_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(max_bandwidth_per_user_));
  // @@protoc_insertion_point(copy_constructor:MumbleUDP.Ping)
}

void Ping::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bandwidth_per_user_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(max_bandwidth_per_user_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:MumbleUDP.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  ::protobuf_MumbleUDP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MumbleUDP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ping& Ping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MumbleUDP_2eproto::scc_info_Ping.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleUDP.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bandwidth_per_user_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(max_bandwidth_per_user_));
  _internal_metadata_.Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleUDP.Ping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool request_extended_information = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_extended_information_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 server_version_v2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_version_v2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_user_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_user_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_bandwidth_per_user = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_per_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleUDP.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleUDP.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleUDP.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // bool request_extended_information = 2;
  if (this->request_extended_information() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request_extended_information(), output);
  }

  // uint64 server_version_v2 = 3;
  if (this->server_version_v2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_version_v2(), output);
  }

  // uint32 user_count = 4;
  if (this->user_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_count(), output);
  }

  // uint32 max_user_count = 5;
  if (this->max_user_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_user_count(), output);
  }

  // uint32 max_bandwidth_per_user = 6;
  if (this->max_bandwidth_per_user() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_bandwidth_per_user(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleUDP.Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleUDP.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // bool request_extended_information = 2;
  if (this->request_extended_information() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request_extended_information(), target);
  }

  // uint64 server_version_v2 = 3;
  if (this->server_version_v2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_version_v2(), target);
  }

  // uint32 user_count = 4;
  if (this->user_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_count(), target);
  }

  // uint32 max_user_count = 5;
  if (this->max_user_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_user_count(), target);
  }

  // uint32 max_bandwidth_per_user = 6;
  if (this->max_bandwidth_per_user() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_bandwidth_per_user(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleUDP.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleUDP.Ping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint64 server_version_v2 = 3;
  if (this->server_version_v2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->server_version_v2());
  }

  // bool request_extended_information = 2;
  if (this->request_extended_information() != 0) {
    total_size += 1 + 1;
  }

  // uint32 user_count = 4;
  if (this->user_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_count());
  }

  // uint32 max_user_count = 5;
  if (this->max_user_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_user_count());
  }

  // uint32 max_bandwidth_per_user = 6;
  if (this->max_bandwidth_per_user() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_bandwidth_per_user());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleUDP.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleUDP.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleUDP.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleUDP.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.server_version_v2() != 0) {
    set_server_version_v2(from.server_version_v2());
  }
  if (from.request_extended_information() != 0) {
    set_request_extended_information(from.request_extended_information());
  }
  if (from.user_count() != 0) {
    set_user_count(from.user_count());
  }
  if (from.max_user_count() != 0) {
    set_max_user_count(from.max_user_count());
  }
  if (from.max_bandwidth_per_user() != 0) {
    set_max_bandwidth_per_user(from.max_bandwidth_per_user());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleUDP.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleUDP.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(server_version_v2_, other->server_version_v2_);
  swap(request_extended_information_, other->request_extended_information_);
  swap(user_count_, other->user_count_);
  swap(max_user_count_, other->max_user_count_);
  swap(max_bandwidth_per_user_, other->max_bandwidth_per_user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_MumbleUDP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MumbleUDP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MumbleUDP
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleUDP::Audio* Arena::CreateMaybeMessage< ::MumbleUDP::Audio >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleUDP::Audio >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleUDP::Ping* Arena::CreateMaybeMessage< ::MumbleUDP::Ping >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleUDP::Ping >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
