// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MumbleUDP.proto

#ifndef PROTOBUF_INCLUDED_MumbleUDP_2eproto
#define PROTOBUF_INCLUDED_MumbleUDP_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MumbleUDP_2eproto 

namespace protobuf_MumbleUDP_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MumbleUDP_2eproto
namespace MumbleUDP {
class Audio;
class AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
}  // namespace MumbleUDP
namespace google {
namespace protobuf {
template<> ::MumbleUDP::Audio* Arena::CreateMaybeMessage<::MumbleUDP::Audio>(Arena*);
template<> ::MumbleUDP::Ping* Arena::CreateMaybeMessage<::MumbleUDP::Ping>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MumbleUDP {

// ===================================================================

class Audio : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MumbleUDP.Audio) */ {
 public:
  Audio();
  virtual ~Audio();

  Audio(const Audio& from);

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Audio& default_instance();

  enum HeaderCase {
    kTarget = 1,
    kContext = 2,
    HEADER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Audio* other);
  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const final {
    return CreateMaybeMessage<Audio>(NULL);
  }

  Audio* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float positional_data = 6;
  int positional_data_size() const;
  void clear_positional_data();
  static const int kPositionalDataFieldNumber = 6;
  float positional_data(int index) const;
  void set_positional_data(int index, float value);
  void add_positional_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      positional_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_positional_data();

  // bytes opus_data = 5;
  void clear_opus_data();
  static const int kOpusDataFieldNumber = 5;
  const ::std::string& opus_data() const;
  void set_opus_data(const ::std::string& value);
  #if LANG_CXX11
  void set_opus_data(::std::string&& value);
  #endif
  void set_opus_data(const char* value);
  void set_opus_data(const void* value, size_t size);
  ::std::string* mutable_opus_data();
  ::std::string* release_opus_data();
  void set_allocated_opus_data(::std::string* opus_data);

  // uint64 frame_number = 4;
  void clear_frame_number();
  static const int kFrameNumberFieldNumber = 4;
  ::google::protobuf::uint64 frame_number() const;
  void set_frame_number(::google::protobuf::uint64 value);

  // uint32 sender_session = 3;
  void clear_sender_session();
  static const int kSenderSessionFieldNumber = 3;
  ::google::protobuf::uint32 sender_session() const;
  void set_sender_session(::google::protobuf::uint32 value);

  // float volume_adjustment = 7;
  void clear_volume_adjustment();
  static const int kVolumeAdjustmentFieldNumber = 7;
  float volume_adjustment() const;
  void set_volume_adjustment(float value);

  // bool is_terminator = 16;
  void clear_is_terminator();
  static const int kIsTerminatorFieldNumber = 16;
  bool is_terminator() const;
  void set_is_terminator(bool value);

  // uint32 target = 1;
  private:
  bool has_target() const;
  public:
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::google::protobuf::uint32 target() const;
  void set_target(::google::protobuf::uint32 value);

  // uint32 context = 2;
  private:
  bool has_context() const;
  public:
  void clear_context();
  static const int kContextFieldNumber = 2;
  ::google::protobuf::uint32 context() const;
  void set_context(::google::protobuf::uint32 value);

  void clear_Header();
  HeaderCase Header_case() const;
  // @@protoc_insertion_point(class_scope:MumbleUDP.Audio)
 private:
  void set_has_target();
  void set_has_context();

  inline bool has_Header() const;
  inline void clear_has_Header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > positional_data_;
  mutable int _positional_data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr opus_data_;
  ::google::protobuf::uint64 frame_number_;
  ::google::protobuf::uint32 sender_session_;
  float volume_adjustment_;
  bool is_terminator_;
  union HeaderUnion {
    HeaderUnion() {}
    ::google::protobuf::uint32 target_;
    ::google::protobuf::uint32 context_;
  } Header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_MumbleUDP_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MumbleUDP.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Ping* other);
  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(NULL);
  }

  Ping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint64 server_version_v2 = 3;
  void clear_server_version_v2();
  static const int kServerVersionV2FieldNumber = 3;
  ::google::protobuf::uint64 server_version_v2() const;
  void set_server_version_v2(::google::protobuf::uint64 value);

  // bool request_extended_information = 2;
  void clear_request_extended_information();
  static const int kRequestExtendedInformationFieldNumber = 2;
  bool request_extended_information() const;
  void set_request_extended_information(bool value);

  // uint32 user_count = 4;
  void clear_user_count();
  static const int kUserCountFieldNumber = 4;
  ::google::protobuf::uint32 user_count() const;
  void set_user_count(::google::protobuf::uint32 value);

  // uint32 max_user_count = 5;
  void clear_max_user_count();
  static const int kMaxUserCountFieldNumber = 5;
  ::google::protobuf::uint32 max_user_count() const;
  void set_max_user_count(::google::protobuf::uint32 value);

  // uint32 max_bandwidth_per_user = 6;
  void clear_max_bandwidth_per_user();
  static const int kMaxBandwidthPerUserFieldNumber = 6;
  ::google::protobuf::uint32 max_bandwidth_per_user() const;
  void set_max_bandwidth_per_user(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MumbleUDP.Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 server_version_v2_;
  bool request_extended_information_;
  ::google::protobuf::uint32 user_count_;
  ::google::protobuf::uint32 max_user_count_;
  ::google::protobuf::uint32 max_bandwidth_per_user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MumbleUDP_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Audio

// uint32 target = 1;
inline bool Audio::has_target() const {
  return Header_case() == kTarget;
}
inline void Audio::set_has_target() {
  _oneof_case_[0] = kTarget;
}
inline void Audio::clear_target() {
  if (has_target()) {
    Header_.target_ = 0u;
    clear_has_Header();
  }
}
inline ::google::protobuf::uint32 Audio::target() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.target)
  if (has_target()) {
    return Header_.target_;
  }
  return 0u;
}
inline void Audio::set_target(::google::protobuf::uint32 value) {
  if (!has_target()) {
    clear_Header();
    set_has_target();
  }
  Header_.target_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.target)
}

// uint32 context = 2;
inline bool Audio::has_context() const {
  return Header_case() == kContext;
}
inline void Audio::set_has_context() {
  _oneof_case_[0] = kContext;
}
inline void Audio::clear_context() {
  if (has_context()) {
    Header_.context_ = 0u;
    clear_has_Header();
  }
}
inline ::google::protobuf::uint32 Audio::context() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.context)
  if (has_context()) {
    return Header_.context_;
  }
  return 0u;
}
inline void Audio::set_context(::google::protobuf::uint32 value) {
  if (!has_context()) {
    clear_Header();
    set_has_context();
  }
  Header_.context_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.context)
}

// uint32 sender_session = 3;
inline void Audio::clear_sender_session() {
  sender_session_ = 0u;
}
inline ::google::protobuf::uint32 Audio::sender_session() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.sender_session)
  return sender_session_;
}
inline void Audio::set_sender_session(::google::protobuf::uint32 value) {
  
  sender_session_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.sender_session)
}

// uint64 frame_number = 4;
inline void Audio::clear_frame_number() {
  frame_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Audio::frame_number() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.frame_number)
  return frame_number_;
}
inline void Audio::set_frame_number(::google::protobuf::uint64 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.frame_number)
}

// bytes opus_data = 5;
inline void Audio::clear_opus_data() {
  opus_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Audio::opus_data() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.opus_data)
  return opus_data_.GetNoArena();
}
inline void Audio::set_opus_data(const ::std::string& value) {
  
  opus_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.opus_data)
}
#if LANG_CXX11
inline void Audio::set_opus_data(::std::string&& value) {
  
  opus_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MumbleUDP.Audio.opus_data)
}
#endif
inline void Audio::set_opus_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opus_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleUDP.Audio.opus_data)
}
inline void Audio::set_opus_data(const void* value, size_t size) {
  
  opus_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleUDP.Audio.opus_data)
}
inline ::std::string* Audio::mutable_opus_data() {
  
  // @@protoc_insertion_point(field_mutable:MumbleUDP.Audio.opus_data)
  return opus_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Audio::release_opus_data() {
  // @@protoc_insertion_point(field_release:MumbleUDP.Audio.opus_data)
  
  return opus_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Audio::set_allocated_opus_data(::std::string* opus_data) {
  if (opus_data != NULL) {
    
  } else {
    
  }
  opus_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opus_data);
  // @@protoc_insertion_point(field_set_allocated:MumbleUDP.Audio.opus_data)
}

// repeated float positional_data = 6;
inline int Audio::positional_data_size() const {
  return positional_data_.size();
}
inline void Audio::clear_positional_data() {
  positional_data_.Clear();
}
inline float Audio::positional_data(int index) const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.positional_data)
  return positional_data_.Get(index);
}
inline void Audio::set_positional_data(int index, float value) {
  positional_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.positional_data)
}
inline void Audio::add_positional_data(float value) {
  positional_data_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleUDP.Audio.positional_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Audio::positional_data() const {
  // @@protoc_insertion_point(field_list:MumbleUDP.Audio.positional_data)
  return positional_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Audio::mutable_positional_data() {
  // @@protoc_insertion_point(field_mutable_list:MumbleUDP.Audio.positional_data)
  return &positional_data_;
}

// float volume_adjustment = 7;
inline void Audio::clear_volume_adjustment() {
  volume_adjustment_ = 0;
}
inline float Audio::volume_adjustment() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.volume_adjustment)
  return volume_adjustment_;
}
inline void Audio::set_volume_adjustment(float value) {
  
  volume_adjustment_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.volume_adjustment)
}

// bool is_terminator = 16;
inline void Audio::clear_is_terminator() {
  is_terminator_ = false;
}
inline bool Audio::is_terminator() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Audio.is_terminator)
  return is_terminator_;
}
inline void Audio::set_is_terminator(bool value) {
  
  is_terminator_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Audio.is_terminator)
}

inline bool Audio::has_Header() const {
  return Header_case() != HEADER_NOT_SET;
}
inline void Audio::clear_has_Header() {
  _oneof_case_[0] = HEADER_NOT_SET;
}
inline Audio::HeaderCase Audio::Header_case() const {
  return Audio::HeaderCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Ping

// uint64 timestamp = 1;
inline void Ping::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Ping::timestamp() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Ping.timestamp)
  return timestamp_;
}
inline void Ping::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Ping.timestamp)
}

// bool request_extended_information = 2;
inline void Ping::clear_request_extended_information() {
  request_extended_information_ = false;
}
inline bool Ping::request_extended_information() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Ping.request_extended_information)
  return request_extended_information_;
}
inline void Ping::set_request_extended_information(bool value) {
  
  request_extended_information_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Ping.request_extended_information)
}

// uint64 server_version_v2 = 3;
inline void Ping::clear_server_version_v2() {
  server_version_v2_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Ping::server_version_v2() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Ping.server_version_v2)
  return server_version_v2_;
}
inline void Ping::set_server_version_v2(::google::protobuf::uint64 value) {
  
  server_version_v2_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Ping.server_version_v2)
}

// uint32 user_count = 4;
inline void Ping::clear_user_count() {
  user_count_ = 0u;
}
inline ::google::protobuf::uint32 Ping::user_count() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Ping.user_count)
  return user_count_;
}
inline void Ping::set_user_count(::google::protobuf::uint32 value) {
  
  user_count_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Ping.user_count)
}

// uint32 max_user_count = 5;
inline void Ping::clear_max_user_count() {
  max_user_count_ = 0u;
}
inline ::google::protobuf::uint32 Ping::max_user_count() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Ping.max_user_count)
  return max_user_count_;
}
inline void Ping::set_max_user_count(::google::protobuf::uint32 value) {
  
  max_user_count_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Ping.max_user_count)
}

// uint32 max_bandwidth_per_user = 6;
inline void Ping::clear_max_bandwidth_per_user() {
  max_bandwidth_per_user_ = 0u;
}
inline ::google::protobuf::uint32 Ping::max_bandwidth_per_user() const {
  // @@protoc_insertion_point(field_get:MumbleUDP.Ping.max_bandwidth_per_user)
  return max_bandwidth_per_user_;
}
inline void Ping::set_max_bandwidth_per_user(::google::protobuf::uint32 value) {
  
  max_bandwidth_per_user_ = value;
  // @@protoc_insertion_point(field_set:MumbleUDP.Ping.max_bandwidth_per_user)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MumbleUDP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MumbleUDP_2eproto
