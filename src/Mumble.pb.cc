// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mumble.proto

#include "Mumble.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Mumble_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ACL_ChanACL;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ACL_ChanGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BanList_BanEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserList_User;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserState_VolumeAdjustment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserStats_Stats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mumble_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoiceTarget_Target;
}  // namespace protobuf_Mumble_2eproto
namespace MumbleProto {
class VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Version>
      _instance;
} _Version_default_instance_;
class UDPTunnelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UDPTunnel>
      _instance;
} _UDPTunnel_default_instance_;
class AuthenticateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticate>
      _instance;
} _Authenticate_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ping>
      _instance;
} _Ping_default_instance_;
class RejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reject>
      _instance;
} _Reject_default_instance_;
class ServerSyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerSync>
      _instance;
} _ServerSync_default_instance_;
class ChannelRemoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelRemove>
      _instance;
} _ChannelRemove_default_instance_;
class ChannelStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelState>
      _instance;
} _ChannelState_default_instance_;
class UserRemoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRemove>
      _instance;
} _UserRemove_default_instance_;
class UserState_VolumeAdjustmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserState_VolumeAdjustment>
      _instance;
} _UserState_VolumeAdjustment_default_instance_;
class UserStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserState>
      _instance;
} _UserState_default_instance_;
class BanList_BanEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BanList_BanEntry>
      _instance;
} _BanList_BanEntry_default_instance_;
class BanListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BanList>
      _instance;
} _BanList_default_instance_;
class TextMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextMessage>
      _instance;
} _TextMessage_default_instance_;
class PermissionDeniedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PermissionDenied>
      _instance;
} _PermissionDenied_default_instance_;
class ACL_ChanGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL_ChanGroup>
      _instance;
} _ACL_ChanGroup_default_instance_;
class ACL_ChanACLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL_ChanACL>
      _instance;
} _ACL_ChanACL_default_instance_;
class ACLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL>
      _instance;
} _ACL_default_instance_;
class QueryUsersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryUsers>
      _instance;
} _QueryUsers_default_instance_;
class CryptSetupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptSetup>
      _instance;
} _CryptSetup_default_instance_;
class ContextActionModifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContextActionModify>
      _instance;
} _ContextActionModify_default_instance_;
class ContextActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContextAction>
      _instance;
} _ContextAction_default_instance_;
class UserList_UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserList_User>
      _instance;
} _UserList_User_default_instance_;
class UserListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserList>
      _instance;
} _UserList_default_instance_;
class VoiceTarget_TargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoiceTarget_Target>
      _instance;
} _VoiceTarget_Target_default_instance_;
class VoiceTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoiceTarget>
      _instance;
} _VoiceTarget_default_instance_;
class PermissionQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PermissionQuery>
      _instance;
} _PermissionQuery_default_instance_;
class CodecVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CodecVersion>
      _instance;
} _CodecVersion_default_instance_;
class UserStats_StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserStats_Stats>
      _instance;
} _UserStats_Stats_default_instance_;
class UserStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserStats>
      _instance;
} _UserStats_default_instance_;
class RequestBlobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestBlob>
      _instance;
} _RequestBlob_default_instance_;
class ServerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerConfig>
      _instance;
} _ServerConfig_default_instance_;
class SuggestConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SuggestConfig>
      _instance;
} _SuggestConfig_default_instance_;
class PluginDataTransmissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PluginDataTransmission>
      _instance;
} _PluginDataTransmission_default_instance_;
}  // namespace MumbleProto
namespace protobuf_Mumble_2eproto {
static void InitDefaultsVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_Version_default_instance_;
    new (ptr) ::MumbleProto::Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Version =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersion}, {}};

static void InitDefaultsUDPTunnel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UDPTunnel_default_instance_;
    new (ptr) ::MumbleProto::UDPTunnel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UDPTunnel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UDPTunnel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUDPTunnel}, {}};

static void InitDefaultsAuthenticate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_Authenticate_default_instance_;
    new (ptr) ::MumbleProto::Authenticate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::Authenticate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticate}, {}};

static void InitDefaultsPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_Ping_default_instance_;
    new (ptr) ::MumbleProto::Ping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::Ping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPing}, {}};

static void InitDefaultsReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_Reject_default_instance_;
    new (ptr) ::MumbleProto::Reject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::Reject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Reject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReject}, {}};

static void InitDefaultsServerSync() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ServerSync_default_instance_;
    new (ptr) ::MumbleProto::ServerSync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ServerSync::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerSync =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerSync}, {}};

static void InitDefaultsChannelRemove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ChannelRemove_default_instance_;
    new (ptr) ::MumbleProto::ChannelRemove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ChannelRemove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelRemove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelRemove}, {}};

static void InitDefaultsChannelState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ChannelState_default_instance_;
    new (ptr) ::MumbleProto::ChannelState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ChannelState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelState}, {}};

static void InitDefaultsUserRemove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserRemove_default_instance_;
    new (ptr) ::MumbleProto::UserRemove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserRemove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserRemove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserRemove}, {}};

static void InitDefaultsUserState_VolumeAdjustment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserState_VolumeAdjustment_default_instance_;
    new (ptr) ::MumbleProto::UserState_VolumeAdjustment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserState_VolumeAdjustment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserState_VolumeAdjustment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserState_VolumeAdjustment}, {}};

static void InitDefaultsUserState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserState_default_instance_;
    new (ptr) ::MumbleProto::UserState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserState}, {
      &protobuf_Mumble_2eproto::scc_info_UserState_VolumeAdjustment.base,}};

static void InitDefaultsBanList_BanEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_BanList_BanEntry_default_instance_;
    new (ptr) ::MumbleProto::BanList_BanEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::BanList_BanEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BanList_BanEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBanList_BanEntry}, {}};

static void InitDefaultsBanList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_BanList_default_instance_;
    new (ptr) ::MumbleProto::BanList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::BanList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BanList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBanList}, {
      &protobuf_Mumble_2eproto::scc_info_BanList_BanEntry.base,}};

static void InitDefaultsTextMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_TextMessage_default_instance_;
    new (ptr) ::MumbleProto::TextMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::TextMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TextMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTextMessage}, {}};

static void InitDefaultsPermissionDenied() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_PermissionDenied_default_instance_;
    new (ptr) ::MumbleProto::PermissionDenied();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::PermissionDenied::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PermissionDenied =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPermissionDenied}, {}};

static void InitDefaultsACL_ChanGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ACL_ChanGroup_default_instance_;
    new (ptr) ::MumbleProto::ACL_ChanGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ACL_ChanGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ACL_ChanGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsACL_ChanGroup}, {}};

static void InitDefaultsACL_ChanACL() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ACL_ChanACL_default_instance_;
    new (ptr) ::MumbleProto::ACL_ChanACL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ACL_ChanACL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ACL_ChanACL =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsACL_ChanACL}, {}};

static void InitDefaultsACL() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ACL_default_instance_;
    new (ptr) ::MumbleProto::ACL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ACL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ACL =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsACL}, {
      &protobuf_Mumble_2eproto::scc_info_ACL_ChanGroup.base,
      &protobuf_Mumble_2eproto::scc_info_ACL_ChanACL.base,}};

static void InitDefaultsQueryUsers() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_QueryUsers_default_instance_;
    new (ptr) ::MumbleProto::QueryUsers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::QueryUsers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueryUsers =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueryUsers}, {}};

static void InitDefaultsCryptSetup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_CryptSetup_default_instance_;
    new (ptr) ::MumbleProto::CryptSetup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::CryptSetup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CryptSetup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCryptSetup}, {}};

static void InitDefaultsContextActionModify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ContextActionModify_default_instance_;
    new (ptr) ::MumbleProto::ContextActionModify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ContextActionModify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContextActionModify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContextActionModify}, {}};

static void InitDefaultsContextAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ContextAction_default_instance_;
    new (ptr) ::MumbleProto::ContextAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ContextAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContextAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContextAction}, {}};

static void InitDefaultsUserList_User() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserList_User_default_instance_;
    new (ptr) ::MumbleProto::UserList_User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserList_User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserList_User =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserList_User}, {}};

static void InitDefaultsUserList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserList_default_instance_;
    new (ptr) ::MumbleProto::UserList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserList}, {
      &protobuf_Mumble_2eproto::scc_info_UserList_User.base,}};

static void InitDefaultsVoiceTarget_Target() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_VoiceTarget_Target_default_instance_;
    new (ptr) ::MumbleProto::VoiceTarget_Target();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::VoiceTarget_Target::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoiceTarget_Target =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoiceTarget_Target}, {}};

static void InitDefaultsVoiceTarget() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_VoiceTarget_default_instance_;
    new (ptr) ::MumbleProto::VoiceTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::VoiceTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VoiceTarget =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVoiceTarget}, {
      &protobuf_Mumble_2eproto::scc_info_VoiceTarget_Target.base,}};

static void InitDefaultsPermissionQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_PermissionQuery_default_instance_;
    new (ptr) ::MumbleProto::PermissionQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::PermissionQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PermissionQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPermissionQuery}, {}};

static void InitDefaultsCodecVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_CodecVersion_default_instance_;
    new (ptr) ::MumbleProto::CodecVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::CodecVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CodecVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCodecVersion}, {}};

static void InitDefaultsUserStats_Stats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserStats_Stats_default_instance_;
    new (ptr) ::MumbleProto::UserStats_Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserStats_Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserStats_Stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserStats_Stats}, {}};

static void InitDefaultsUserStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_UserStats_default_instance_;
    new (ptr) ::MumbleProto::UserStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::UserStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserStats}, {
      &protobuf_Mumble_2eproto::scc_info_UserStats_Stats.base,
      &protobuf_Mumble_2eproto::scc_info_Version.base,}};

static void InitDefaultsRequestBlob() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_RequestBlob_default_instance_;
    new (ptr) ::MumbleProto::RequestBlob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::RequestBlob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestBlob =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestBlob}, {}};

static void InitDefaultsServerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_ServerConfig_default_instance_;
    new (ptr) ::MumbleProto::ServerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::ServerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerConfig}, {}};

static void InitDefaultsSuggestConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_SuggestConfig_default_instance_;
    new (ptr) ::MumbleProto::SuggestConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::SuggestConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SuggestConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSuggestConfig}, {}};

static void InitDefaultsPluginDataTransmission() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MumbleProto::_PluginDataTransmission_default_instance_;
    new (ptr) ::MumbleProto::PluginDataTransmission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MumbleProto::PluginDataTransmission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PluginDataTransmission =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPluginDataTransmission}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Version.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UDPTunnel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerSync.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelRemove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserRemove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserState_VolumeAdjustment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BanList_BanEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BanList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PermissionDenied.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL_ChanGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL_ChanACL.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryUsers.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptSetup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContextActionModify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContextAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserList_User.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoiceTarget_Target.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoiceTarget.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PermissionQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CodecVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserStats_Stats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestBlob.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SuggestConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PluginDataTransmission.base);
}

::google::protobuf::Metadata file_level_metadata[34];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, version_v1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, version_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Version, os_version_),
  4,
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UDPTunnel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UDPTunnel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UDPTunnel, packet_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, celt_versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, opus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Authenticate, client_type_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, good_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, late_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, resync_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, udp_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, tcp_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, udp_ping_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, udp_ping_var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, tcp_ping_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Ping, tcp_ping_var_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Reject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Reject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Reject, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::Reject, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerSync, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerSync, max_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerSync, welcome_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerSync, permissions_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelRemove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelRemove, channel_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, links_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, links_remove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, temporary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, description_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, max_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, is_enter_restricted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ChannelState, can_enter_),
  3,
  4,
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  7,
  5,
  2,
  6,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserRemove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserRemove, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserRemove, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserRemove, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserRemove, ban_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState_VolumeAdjustment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState_VolumeAdjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState_VolumeAdjustment, listening_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState_VolumeAdjustment, volume_adjustment_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, mute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, deaf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, suppress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, self_mute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, self_deaf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, plugin_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, plugin_identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, comment_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, texture_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, priority_speaker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, recording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, temporary_access_tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, listening_channel_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, listening_channel_remove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserState, listening_volume_adjustment_),
  8,
  9,
  0,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  17,
  18,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList_BanEntry, duration_),
  0,
  5,
  1,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList, bans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::BanList, query_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, tree_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::TextMessage, message_),
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionDenied, name_),
  2,
  3,
  4,
  0,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, inherited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, inherit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, inheritable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, remove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanGroup, inherited_members_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, apply_here_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, apply_subs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, inherited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, grant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL_ChanACL, deny_),
  4,
  5,
  6,
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, inherit_acls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, acls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ACL, query_),
  0,
  2,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::QueryUsers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::QueryUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::QueryUsers, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::QueryUsers, names_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CryptSetup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CryptSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CryptSetup, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CryptSetup, client_nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CryptSetup, server_nonce_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextActionModify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextActionModify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextActionModify, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextActionModify, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextActionModify, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextActionModify, operation_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextAction, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextAction, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ContextAction, action_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList_User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList_User, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList_User, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList_User, last_seen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList_User, last_channel_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserList, users_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget_Target, children_),
  ~0u,
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::VoiceTarget, targets_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionQuery, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionQuery, permissions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PermissionQuery, flush_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CodecVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CodecVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CodecVersion, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CodecVersion, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CodecVersion, prefer_alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::CodecVersion, opus_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats_Stats, good_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats_Stats, late_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats_Stats, lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats_Stats, resync_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, stats_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, from_client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, from_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, udp_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, tcp_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, udp_ping_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, udp_ping_var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, tcp_ping_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, tcp_ping_var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, celt_versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, onlinesecs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, idlesecs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, strong_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::UserStats, opus_),
  4,
  11,
  ~0u,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  3,
  ~0u,
  0,
  14,
  15,
  16,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::RequestBlob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::RequestBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::RequestBlob, session_texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::RequestBlob, session_comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::RequestBlob, channel_description_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, max_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, welcome_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, allow_html_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, message_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, image_message_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, max_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::ServerConfig, recording_allowed_),
  1,
  0,
  4,
  2,
  3,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::SuggestConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::SuggestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::SuggestConfig, version_v1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::SuggestConfig, version_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::SuggestConfig, positional_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::SuggestConfig, push_to_talk_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PluginDataTransmission, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PluginDataTransmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PluginDataTransmission, sendersession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PluginDataTransmission, receiversessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PluginDataTransmission, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MumbleProto::PluginDataTransmission, dataid_),
  2,
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::MumbleProto::Version)},
  { 15, 21, sizeof(::MumbleProto::UDPTunnel)},
  { 22, 33, sizeof(::MumbleProto::Authenticate)},
  { 39, 55, sizeof(::MumbleProto::Ping)},
  { 66, 73, sizeof(::MumbleProto::Reject)},
  { 75, 84, sizeof(::MumbleProto::ServerSync)},
  { 88, 94, sizeof(::MumbleProto::ChannelRemove)},
  { 95, 113, sizeof(::MumbleProto::ChannelState)},
  { 126, 135, sizeof(::MumbleProto::UserRemove)},
  { 139, 146, sizeof(::MumbleProto::UserState_VolumeAdjustment)},
  { 148, 176, sizeof(::MumbleProto::UserState)},
  { 199, 211, sizeof(::MumbleProto::BanList_BanEntry)},
  { 218, 225, sizeof(::MumbleProto::BanList)},
  { 227, 237, sizeof(::MumbleProto::TextMessage)},
  { 242, 253, sizeof(::MumbleProto::PermissionDenied)},
  { 259, 271, sizeof(::MumbleProto::ACL_ChanGroup)},
  { 278, 290, sizeof(::MumbleProto::ACL_ChanACL)},
  { 297, 307, sizeof(::MumbleProto::ACL)},
  { 312, 319, sizeof(::MumbleProto::QueryUsers)},
  { 321, 329, sizeof(::MumbleProto::CryptSetup)},
  { 332, 341, sizeof(::MumbleProto::ContextActionModify)},
  { 345, 353, sizeof(::MumbleProto::ContextAction)},
  { 356, 365, sizeof(::MumbleProto::UserList_User)},
  { 369, 375, sizeof(::MumbleProto::UserList)},
  { 376, 386, sizeof(::MumbleProto::VoiceTarget_Target)},
  { 391, 398, sizeof(::MumbleProto::VoiceTarget)},
  { 400, 408, sizeof(::MumbleProto::PermissionQuery)},
  { 411, 420, sizeof(::MumbleProto::CodecVersion)},
  { 424, 433, sizeof(::MumbleProto::UserStats_Stats)},
  { 437, 461, sizeof(::MumbleProto::UserStats)},
  { 480, 488, sizeof(::MumbleProto::RequestBlob)},
  { 491, 503, sizeof(::MumbleProto::ServerConfig)},
  { 510, 519, sizeof(::MumbleProto::SuggestConfig)},
  { 523, 532, sizeof(::MumbleProto::PluginDataTransmission)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UDPTunnel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_Authenticate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_Reject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ServerSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ChannelRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ChannelState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserState_VolumeAdjustment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_BanList_BanEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_BanList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_TextMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_PermissionDenied_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ACL_ChanGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ACL_ChanACL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ACL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_QueryUsers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_CryptSetup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ContextActionModify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ContextAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserList_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_VoiceTarget_Target_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_VoiceTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_PermissionQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_CodecVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserStats_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_UserStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_RequestBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_ServerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_SuggestConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MumbleProto::_PluginDataTransmission_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Mumble.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 34);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Mumble.proto\022\013MumbleProto\"b\n\007Version\022\022"
      "\n\nversion_v1\030\001 \001(\r\022\022\n\nversion_v2\030\005 \001(\004\022\017"
      "\n\007release\030\002 \001(\t\022\n\n\002os\030\003 \001(\t\022\022\n\nos_versio"
      "n\030\004 \001(\t\"\033\n\tUDPTunnel\022\016\n\006packet\030\001 \002(\014\"\206\001\n"
      "\014Authenticate\022\020\n\010username\030\001 \001(\t\022\020\n\010passw"
      "ord\030\002 \001(\t\022\016\n\006tokens\030\003 \003(\t\022\025\n\rcelt_versio"
      "ns\030\004 \003(\005\022\023\n\004opus\030\005 \001(\010:\005false\022\026\n\013client_"
      "type\030\006 \001(\005:\0010\"\325\001\n\004Ping\022\021\n\ttimestamp\030\001 \001("
      "\004\022\014\n\004good\030\002 \001(\r\022\014\n\004late\030\003 \001(\r\022\014\n\004lost\030\004 "
      "\001(\r\022\016\n\006resync\030\005 \001(\r\022\023\n\013udp_packets\030\006 \001(\r"
      "\022\023\n\013tcp_packets\030\007 \001(\r\022\024\n\014udp_ping_avg\030\010 "
      "\001(\002\022\024\n\014udp_ping_var\030\t \001(\002\022\024\n\014tcp_ping_av"
      "g\030\n \001(\002\022\024\n\014tcp_ping_var\030\013 \001(\002\"\367\001\n\006Reject"
      "\022,\n\004type\030\001 \001(\0162\036.MumbleProto.Reject.Reje"
      "ctType\022\016\n\006reason\030\002 \001(\t\"\256\001\n\nRejectType\022\010\n"
      "\004None\020\000\022\020\n\014WrongVersion\020\001\022\023\n\017InvalidUser"
      "name\020\002\022\017\n\013WrongUserPW\020\003\022\021\n\rWrongServerPW"
      "\020\004\022\021\n\rUsernameInUse\020\005\022\016\n\nServerFull\020\006\022\021\n"
      "\rNoCertificate\020\007\022\025\n\021AuthenticatorFail\020\010\""
      "_\n\nServerSync\022\017\n\007session\030\001 \001(\r\022\025\n\rmax_ba"
      "ndwidth\030\002 \001(\r\022\024\n\014welcome_text\030\003 \001(\t\022\023\n\013p"
      "ermissions\030\004 \001(\004\"#\n\rChannelRemove\022\022\n\ncha"
      "nnel_id\030\001 \002(\r\"\231\002\n\014ChannelState\022\022\n\nchanne"
      "l_id\030\001 \001(\r\022\016\n\006parent\030\002 \001(\r\022\014\n\004name\030\003 \001(\t"
      "\022\r\n\005links\030\004 \003(\r\022\023\n\013description\030\005 \001(\t\022\021\n\t"
      "links_add\030\006 \003(\r\022\024\n\014links_remove\030\007 \003(\r\022\030\n"
      "\ttemporary\030\010 \001(\010:\005false\022\023\n\010position\030\t \001("
      "\005:\0010\022\030\n\020description_hash\030\n \001(\014\022\021\n\tmax_us"
      "ers\030\013 \001(\r\022\033\n\023is_enter_restricted\030\014 \001(\010\022\021"
      "\n\tcan_enter\030\r \001(\010\"I\n\nUserRemove\022\017\n\007sessi"
      "on\030\001 \002(\r\022\r\n\005actor\030\002 \001(\r\022\016\n\006reason\030\003 \001(\t\022"
      "\013\n\003ban\030\004 \001(\010\"\346\004\n\tUserState\022\017\n\007session\030\001 "
      "\001(\r\022\r\n\005actor\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\017\n\007user"
      "_id\030\004 \001(\r\022\022\n\nchannel_id\030\005 \001(\r\022\014\n\004mute\030\006 "
      "\001(\010\022\014\n\004deaf\030\007 \001(\010\022\020\n\010suppress\030\010 \001(\010\022\021\n\ts"
      "elf_mute\030\t \001(\010\022\021\n\tself_deaf\030\n \001(\010\022\017\n\007tex"
      "ture\030\013 \001(\014\022\026\n\016plugin_context\030\014 \001(\014\022\027\n\017pl"
      "ugin_identity\030\r \001(\t\022\017\n\007comment\030\016 \001(\t\022\014\n\004"
      "hash\030\017 \001(\t\022\024\n\014comment_hash\030\020 \001(\014\022\024\n\014text"
      "ure_hash\030\021 \001(\014\022\030\n\020priority_speaker\030\022 \001(\010"
      "\022\021\n\trecording\030\023 \001(\010\022\037\n\027temporary_access_"
      "tokens\030\024 \003(\t\022\035\n\025listening_channel_add\030\025 "
      "\003(\r\022 \n\030listening_channel_remove\030\026 \003(\r\022L\n"
      "\033listening_volume_adjustment\030\027 \003(\0132\'.Mum"
      "bleProto.UserState.VolumeAdjustment\032H\n\020V"
      "olumeAdjustment\022\031\n\021listening_channel\030\001 \001"
      "(\r\022\031\n\021volume_adjustment\030\002 \001(\002\"\304\001\n\007BanLis"
      "t\022+\n\004bans\030\001 \003(\0132\035.MumbleProto.BanList.Ba"
      "nEntry\022\024\n\005query\030\002 \001(\010:\005false\032v\n\010BanEntry"
      "\022\017\n\007address\030\001 \002(\014\022\014\n\004mask\030\002 \002(\r\022\014\n\004name\030"
      "\003 \001(\t\022\014\n\004hash\030\004 \001(\t\022\016\n\006reason\030\005 \001(\t\022\r\n\005s"
      "tart\030\006 \001(\t\022\020\n\010duration\030\007 \001(\r\"c\n\013TextMess"
      "age\022\r\n\005actor\030\001 \001(\r\022\017\n\007session\030\002 \003(\r\022\022\n\nc"
      "hannel_id\030\003 \003(\r\022\017\n\007tree_id\030\004 \003(\r\022\017\n\007mess"
      "age\030\005 \002(\t\"\247\003\n\020PermissionDenied\022\022\n\npermis"
      "sion\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\022\017\n\007sessio"
      "n\030\003 \001(\r\022\016\n\006reason\030\004 \001(\t\0224\n\004type\030\005 \001(\0162&."
      "MumbleProto.PermissionDenied.DenyType\022\014\n"
      "\004name\030\006 \001(\t\"\205\002\n\010DenyType\022\010\n\004Text\020\000\022\016\n\nPe"
      "rmission\020\001\022\r\n\tSuperUser\020\002\022\017\n\013ChannelName"
      "\020\003\022\017\n\013TextTooLong\020\004\022\007\n\003H9K\020\005\022\024\n\020Temporar"
      "yChannel\020\006\022\026\n\022MissingCertificate\020\007\022\014\n\010Us"
      "erName\020\010\022\017\n\013ChannelFull\020\t\022\020\n\014NestingLimi"
      "t\020\n\022\025\n\021ChannelCountLimit\020\013\022\030\n\024ChannelLis"
      "tenerLimit\020\014\022\025\n\021UserListenerLimit\020\r\"\324\003\n\003"
      "ACL\022\022\n\nchannel_id\030\001 \002(\r\022\032\n\014inherit_acls\030"
      "\002 \001(\010:\004true\022*\n\006groups\030\003 \003(\0132\032.MumbleProt"
      "o.ACL.ChanGroup\022&\n\004acls\030\004 \003(\0132\030.MumblePr"
      "oto.ACL.ChanACL\022\024\n\005query\030\005 \001(\010:\005false\032\234\001"
      "\n\tChanGroup\022\014\n\004name\030\001 \002(\t\022\027\n\tinherited\030\002"
      " \001(\010:\004true\022\025\n\007inherit\030\003 \001(\010:\004true\022\031\n\013inh"
      "eritable\030\004 \001(\010:\004true\022\013\n\003add\030\005 \003(\r\022\016\n\006rem"
      "ove\030\006 \003(\r\022\031\n\021inherited_members\030\007 \003(\r\032\223\001\n"
      "\007ChanACL\022\030\n\napply_here\030\001 \001(\010:\004true\022\030\n\nap"
      "ply_subs\030\002 \001(\010:\004true\022\027\n\tinherited\030\003 \001(\010:"
      "\004true\022\017\n\007user_id\030\004 \001(\r\022\r\n\005group\030\005 \001(\t\022\r\n"
      "\005grant\030\006 \001(\r\022\014\n\004deny\030\007 \001(\r\"(\n\nQueryUsers"
      "\022\013\n\003ids\030\001 \003(\r\022\r\n\005names\030\002 \003(\t\"E\n\nCryptSet"
      "up\022\013\n\003key\030\001 \001(\014\022\024\n\014client_nonce\030\002 \001(\014\022\024\n"
      "\014server_nonce\030\003 \001(\014\"\323\001\n\023ContextActionMod"
      "ify\022\016\n\006action\030\001 \002(\t\022\014\n\004text\030\002 \001(\t\022\017\n\007con"
      "text\030\003 \001(\r\022=\n\toperation\030\004 \001(\0162*.MumblePr"
      "oto.ContextActionModify.Operation\",\n\007Con"
      "text\022\n\n\006Server\020\001\022\013\n\007Channel\020\002\022\010\n\004User\020\004\""
      " \n\tOperation\022\007\n\003Add\020\000\022\n\n\006Remove\020\001\"D\n\rCon"
      "textAction\022\017\n\007session\030\001 \001(\r\022\022\n\nchannel_i"
      "d\030\002 \001(\r\022\016\n\006action\030\003 \002(\t\"\205\001\n\010UserList\022)\n\005"
      "users\030\001 \003(\0132\032.MumbleProto.UserList.User\032"
      "N\n\004User\022\017\n\007user_id\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\021"
      "\n\tlast_seen\030\003 \001(\t\022\024\n\014last_channel\030\004 \001(\r\""
      "\270\001\n\013VoiceTarget\022\n\n\002id\030\001 \001(\r\0220\n\007targets\030\002"
      " \003(\0132\037.MumbleProto.VoiceTarget.Target\032k\n"
      "\006Target\022\017\n\007session\030\001 \003(\r\022\022\n\nchannel_id\030\002"
      " \001(\r\022\r\n\005group\030\003 \001(\t\022\024\n\005links\030\004 \001(\010:\005fals"
      "e\022\027\n\010children\030\005 \001(\010:\005false\"P\n\017Permission"
      "Query\022\022\n\nchannel_id\030\001 \001(\r\022\023\n\013permissions"
      "\030\002 \001(\r\022\024\n\005flush\030\003 \001(\010:\005false\"\\\n\014CodecVer"
      "sion\022\r\n\005alpha\030\001 \002(\005\022\014\n\004beta\030\002 \002(\005\022\032\n\014pre"
      "fer_alpha\030\003 \002(\010:\004true\022\023\n\004opus\030\004 \001(\010:\005fal"
      "se\"\270\004\n\tUserStats\022\017\n\007session\030\001 \001(\r\022\031\n\nsta"
      "ts_only\030\002 \001(\010:\005false\022\024\n\014certificates\030\003 \003"
      "(\014\0221\n\013from_client\030\004 \001(\0132\034.MumbleProto.Us"
      "erStats.Stats\0221\n\013from_server\030\005 \001(\0132\034.Mum"
      "bleProto.UserStats.Stats\022\023\n\013udp_packets\030"
      "\006 \001(\r\022\023\n\013tcp_packets\030\007 \001(\r\022\024\n\014udp_ping_a"
      "vg\030\010 \001(\002\022\024\n\014udp_ping_var\030\t \001(\002\022\024\n\014tcp_pi"
      "ng_avg\030\n \001(\002\022\024\n\014tcp_ping_var\030\013 \001(\002\022%\n\007ve"
      "rsion\030\014 \001(\0132\024.MumbleProto.Version\022\025\n\rcel"
      "t_versions\030\r \003(\005\022\017\n\007address\030\016 \001(\014\022\021\n\tban"
      "dwidth\030\017 \001(\r\022\022\n\nonlinesecs\030\020 \001(\r\022\020\n\010idle"
      "secs\030\021 \001(\r\022!\n\022strong_certificate\030\022 \001(\010:\005"
      "false\022\023\n\004opus\030\023 \001(\010:\005false\032A\n\005Stats\022\014\n\004g"
      "ood\030\001 \001(\r\022\014\n\004late\030\002 \001(\r\022\014\n\004lost\030\003 \001(\r\022\016\n"
      "\006resync\030\004 \001(\r\"\\\n\013RequestBlob\022\027\n\017session_"
      "texture\030\001 \003(\r\022\027\n\017session_comment\030\002 \003(\r\022\033"
      "\n\023channel_description\030\003 \003(\r\"\263\001\n\014ServerCo"
      "nfig\022\025\n\rmax_bandwidth\030\001 \001(\r\022\024\n\014welcome_t"
      "ext\030\002 \001(\t\022\022\n\nallow_html\030\003 \001(\010\022\026\n\016message"
      "_length\030\004 \001(\r\022\034\n\024image_message_length\030\005 "
      "\001(\r\022\021\n\tmax_users\030\006 \001(\r\022\031\n\021recording_allo"
      "wed\030\007 \001(\010\"a\n\rSuggestConfig\022\022\n\nversion_v1"
      "\030\001 \001(\r\022\022\n\nversion_v2\030\004 \001(\004\022\022\n\npositional"
      "\030\002 \001(\010\022\024\n\014push_to_talk\030\003 \001(\010\"k\n\026PluginDa"
      "taTransmission\022\025\n\rsenderSession\030\001 \001(\r\022\034\n"
      "\020receiverSessions\030\002 \003(\rB\002\020\001\022\014\n\004data\030\003 \001("
      "\014\022\016\n\006dataID\030\004 \001(\tB\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5021);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mumble.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Mumble_2eproto
namespace MumbleProto {
const ::google::protobuf::EnumDescriptor* Reject_RejectType_descriptor() {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Mumble_2eproto::file_level_enum_descriptors[0];
}
bool Reject_RejectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reject_RejectType Reject::None;
const Reject_RejectType Reject::WrongVersion;
const Reject_RejectType Reject::InvalidUsername;
const Reject_RejectType Reject::WrongUserPW;
const Reject_RejectType Reject::WrongServerPW;
const Reject_RejectType Reject::UsernameInUse;
const Reject_RejectType Reject::ServerFull;
const Reject_RejectType Reject::NoCertificate;
const Reject_RejectType Reject::AuthenticatorFail;
const Reject_RejectType Reject::RejectType_MIN;
const Reject_RejectType Reject::RejectType_MAX;
const int Reject::RejectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PermissionDenied_DenyType_descriptor() {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Mumble_2eproto::file_level_enum_descriptors[1];
}
bool PermissionDenied_DenyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionDenied_DenyType PermissionDenied::Text;
const PermissionDenied_DenyType PermissionDenied::Permission;
const PermissionDenied_DenyType PermissionDenied::SuperUser;
const PermissionDenied_DenyType PermissionDenied::ChannelName;
const PermissionDenied_DenyType PermissionDenied::TextTooLong;
const PermissionDenied_DenyType PermissionDenied::H9K;
const PermissionDenied_DenyType PermissionDenied::TemporaryChannel;
const PermissionDenied_DenyType PermissionDenied::MissingCertificate;
const PermissionDenied_DenyType PermissionDenied::UserName;
const PermissionDenied_DenyType PermissionDenied::ChannelFull;
const PermissionDenied_DenyType PermissionDenied::NestingLimit;
const PermissionDenied_DenyType PermissionDenied::ChannelCountLimit;
const PermissionDenied_DenyType PermissionDenied::ChannelListenerLimit;
const PermissionDenied_DenyType PermissionDenied::UserListenerLimit;
const PermissionDenied_DenyType PermissionDenied::DenyType_MIN;
const PermissionDenied_DenyType PermissionDenied::DenyType_MAX;
const int PermissionDenied::DenyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContextActionModify_Context_descriptor() {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Mumble_2eproto::file_level_enum_descriptors[2];
}
bool ContextActionModify_Context_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContextActionModify_Context ContextActionModify::Server;
const ContextActionModify_Context ContextActionModify::Channel;
const ContextActionModify_Context ContextActionModify::User;
const ContextActionModify_Context ContextActionModify::Context_MIN;
const ContextActionModify_Context ContextActionModify::Context_MAX;
const int ContextActionModify::Context_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContextActionModify_Operation_descriptor() {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Mumble_2eproto::file_level_enum_descriptors[3];
}
bool ContextActionModify_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContextActionModify_Operation ContextActionModify::Add;
const ContextActionModify_Operation ContextActionModify::Remove;
const ContextActionModify_Operation ContextActionModify::Operation_MIN;
const ContextActionModify_Operation ContextActionModify::Operation_MAX;
const int ContextActionModify::Operation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Version::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kVersionV1FieldNumber;
const int Version::kVersionV2FieldNumber;
const int Version::kReleaseFieldNumber;
const int Version::kOsFieldNumber;
const int Version::kOsVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_Version.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_release()) {
    release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
  }
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  ::memcpy(&version_v2_, &from.version_v2_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_v1_) -
    reinterpret_cast<char*>(&version_v2_)) + sizeof(version_v1_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Version)
}

void Version::SharedCtor() {
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_v2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_v1_) -
      reinterpret_cast<char*>(&version_v2_)) + sizeof(version_v1_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:MumbleProto.Version)
  SharedDtor();
}

void Version::SharedDtor() {
  release_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Version& Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_Version.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      release_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      os_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&version_v2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_v1_) -
        reinterpret_cast<char*>(&version_v2_)) + sizeof(version_v1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_v1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_v1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string release = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->release().data(), static_cast<int>(this->release().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Version.release");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), static_cast<int>(this->os().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Version.os");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), static_cast<int>(this->os_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Version.os_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version_v2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_version_v2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_v2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_v1 = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version_v1(), output);
  }

  // optional string release = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release().data(), static_cast<int>(this->release().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.release");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->release(), output);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os(), output);
  }

  // optional string os_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_version(), output);
  }

  // optional uint64 version_v2 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->version_v2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Version)
}

::google::protobuf::uint8* Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_v1 = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version_v1(), target);
  }

  // optional string release = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release().data(), static_cast<int>(this->release().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.release");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->release(), target);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->os(), target);
  }

  // optional string os_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  // optional uint64 version_v2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->version_v2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Version)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string release = 2;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release());
    }

    // optional string os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional uint64 version_v2 = 5;
    if (has_version_v2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_v2());
    }

    // optional uint32 version_v1 = 1;
    if (has_version_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_v1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_release();
      release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      version_v2_ = from.version_v2_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_v1_ = from.version_v1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  using std::swap;
  release_.Swap(&other->release_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_.Swap(&other->os_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_v2_, other->version_v2_);
  swap(version_v1_, other->version_v1_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UDPTunnel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UDPTunnel::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UDPTunnel::UDPTunnel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UDPTunnel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UDPTunnel)
}
UDPTunnel::UDPTunnel(const UDPTunnel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet()) {
    packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_);
  }
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UDPTunnel)
}

void UDPTunnel::SharedCtor() {
  packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UDPTunnel::~UDPTunnel() {
  // @@protoc_insertion_point(destructor:MumbleProto.UDPTunnel)
  SharedDtor();
}

void UDPTunnel::SharedDtor() {
  packet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UDPTunnel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UDPTunnel::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UDPTunnel& UDPTunnel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UDPTunnel.base);
  return *internal_default_instance();
}


void UDPTunnel::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UDPTunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    packet_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UDPTunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UDPTunnel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes packet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UDPTunnel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UDPTunnel)
  return false;
#undef DO_
}

void UDPTunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UDPTunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes packet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->packet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UDPTunnel)
}

::google::protobuf::uint8* UDPTunnel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UDPTunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes packet = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->packet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UDPTunnel)
  return target;
}

size_t UDPTunnel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UDPTunnel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes packet = 1;
  if (has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->packet());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UDPTunnel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UDPTunnel)
  GOOGLE_DCHECK_NE(&from, this);
  const UDPTunnel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UDPTunnel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UDPTunnel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UDPTunnel)
    MergeFrom(*source);
  }
}

void UDPTunnel::MergeFrom(const UDPTunnel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UDPTunnel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packet()) {
    set_has_packet();
    packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_);
  }
}

void UDPTunnel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UDPTunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDPTunnel::CopyFrom(const UDPTunnel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UDPTunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDPTunnel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UDPTunnel::Swap(UDPTunnel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UDPTunnel::InternalSwap(UDPTunnel* other) {
  using std::swap;
  packet_.Swap(&other->packet_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UDPTunnel::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticate::kUsernameFieldNumber;
const int Authenticate::kPasswordFieldNumber;
const int Authenticate::kTokensFieldNumber;
const int Authenticate::kCeltVersionsFieldNumber;
const int Authenticate::kOpusFieldNumber;
const int Authenticate::kClientTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticate::Authenticate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_Authenticate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Authenticate)
}
Authenticate::Authenticate(const Authenticate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_),
      celt_versions_(from.celt_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&opus_, &from.opus_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&opus_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Authenticate)
}

void Authenticate::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&opus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&opus_)) + sizeof(client_type_));
}

Authenticate::~Authenticate() {
  // @@protoc_insertion_point(destructor:MumbleProto.Authenticate)
  SharedDtor();
}

void Authenticate::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authenticate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticate::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticate& Authenticate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_Authenticate.base);
  return *internal_default_instance();
}


void Authenticate::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  celt_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&opus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_type_) -
        reinterpret_cast<char*>(&opus_)) + sizeof(client_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Authenticate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Authenticate.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Authenticate.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tokens = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tokens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tokens(this->tokens_size() - 1).data(),
            static_cast<int>(this->tokens(this->tokens_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Authenticate.tokens");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 celt_versions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_celt_versions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_celt_versions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool opus = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_opus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_type = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_client_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Authenticate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Authenticate)
  return false;
#undef DO_
}

void Authenticate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated string tokens = 3;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokens(i).data(), static_cast<int>(this->tokens(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.tokens");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tokens(i), output);
  }

  // repeated int32 celt_versions = 4;
  for (int i = 0, n = this->celt_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->celt_versions(i), output);
  }

  // optional bool opus = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->opus(), output);
  }

  // optional int32 client_type = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->client_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Authenticate)
}

::google::protobuf::uint8* Authenticate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated string tokens = 3;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokens(i).data(), static_cast<int>(this->tokens(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.tokens");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tokens(i), target);
  }

  // repeated int32 celt_versions = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->celt_versions_, target);

  // optional bool opus = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->opus(), target);
  }

  // optional int32 client_type = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->client_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Authenticate)
  return target;
}

size_t Authenticate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Authenticate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string tokens = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tokens_size());
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tokens(i));
  }

  // repeated int32 celt_versions = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->celt_versions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->celt_versions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool opus = 5 [default = false];
    if (has_opus()) {
      total_size += 1 + 1;
    }

    // optional int32 client_type = 6 [default = 0];
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Authenticate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Authenticate)
    MergeFrom(*source);
  }
}

void Authenticate::MergeFrom(const Authenticate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  celt_versions_.MergeFrom(from.celt_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      opus_ = from.opus_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_type_ = from.client_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Authenticate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticate::CopyFrom(const Authenticate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticate::IsInitialized() const {
  return true;
}

void Authenticate::Swap(Authenticate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticate::InternalSwap(Authenticate* other) {
  using std::swap;
  tokens_.InternalSwap(CastToBase(&other->tokens_));
  celt_versions_.InternalSwap(&other->celt_versions_);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(opus_, other->opus_);
  swap(client_type_, other->client_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticate::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimestampFieldNumber;
const int Ping::kGoodFieldNumber;
const int Ping::kLateFieldNumber;
const int Ping::kLostFieldNumber;
const int Ping::kResyncFieldNumber;
const int Ping::kUdpPacketsFieldNumber;
const int Ping::kTcpPacketsFieldNumber;
const int Ping::kUdpPingAvgFieldNumber;
const int Ping::kUdpPingVarFieldNumber;
const int Ping::kTcpPingAvgFieldNumber;
const int Ping::kTcpPingVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_Ping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Ping)
}
Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_ping_var_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tcp_ping_var_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Ping)
}

void Ping::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_ping_var_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tcp_ping_var_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:MumbleProto.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ping& Ping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_Ping.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&udp_ping_avg_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(udp_ping_avg_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&udp_ping_var_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcp_ping_var_) -
        reinterpret_cast<char*>(&udp_ping_var_)) + sizeof(tcp_ping_var_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Ping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 good = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_good();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 late = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_late();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &late_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resync = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_resync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 udp_packets = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_udp_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udp_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tcp_packets = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tcp_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float udp_ping_avg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_udp_ping_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float udp_ping_var = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_udp_ping_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tcp_ping_avg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_tcp_ping_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tcp_ping_var = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_tcp_ping_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 good = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->good(), output);
  }

  // optional uint32 late = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->late(), output);
  }

  // optional uint32 lost = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lost(), output);
  }

  // optional uint32 resync = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resync(), output);
  }

  // optional uint32 udp_packets = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->udp_packets(), output);
  }

  // optional uint32 tcp_packets = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcp_packets(), output);
  }

  // optional float udp_ping_avg = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->udp_ping_avg(), output);
  }

  // optional float udp_ping_var = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->udp_ping_var(), output);
  }

  // optional float tcp_ping_avg = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tcp_ping_avg(), output);
  }

  // optional float tcp_ping_var = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tcp_ping_var(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 good = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->good(), target);
  }

  // optional uint32 late = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->late(), target);
  }

  // optional uint32 lost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lost(), target);
  }

  // optional uint32 resync = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resync(), target);
  }

  // optional uint32 udp_packets = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->udp_packets(), target);
  }

  // optional uint32 tcp_packets = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcp_packets(), target);
  }

  // optional float udp_ping_avg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->udp_ping_avg(), target);
  }

  // optional float udp_ping_var = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->udp_ping_var(), target);
  }

  // optional float tcp_ping_avg = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tcp_ping_avg(), target);
  }

  // optional float tcp_ping_var = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tcp_ping_var(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Ping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 good = 2;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good());
    }

    // optional uint32 late = 3;
    if (has_late()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->late());
    }

    // optional uint32 lost = 4;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost());
    }

    // optional uint32 resync = 5;
    if (has_resync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resync());
    }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udp_packets());
    }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcp_packets());
    }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float udp_ping_var = 9;
    if (has_udp_ping_var()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      good_ = from.good_;
    }
    if (cached_has_bits & 0x00000004u) {
      late_ = from.late_;
    }
    if (cached_has_bits & 0x00000008u) {
      lost_ = from.lost_;
    }
    if (cached_has_bits & 0x00000010u) {
      resync_ = from.resync_;
    }
    if (cached_has_bits & 0x00000020u) {
      udp_packets_ = from.udp_packets_;
    }
    if (cached_has_bits & 0x00000040u) {
      tcp_packets_ = from.tcp_packets_;
    }
    if (cached_has_bits & 0x00000080u) {
      udp_ping_avg_ = from.udp_ping_avg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      udp_ping_var_ = from.udp_ping_var_;
    }
    if (cached_has_bits & 0x00000200u) {
      tcp_ping_avg_ = from.tcp_ping_avg_;
    }
    if (cached_has_bits & 0x00000400u) {
      tcp_ping_var_ = from.tcp_ping_var_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(good_, other->good_);
  swap(late_, other->late_);
  swap(lost_, other->lost_);
  swap(resync_, other->resync_);
  swap(udp_packets_, other->udp_packets_);
  swap(tcp_packets_, other->tcp_packets_);
  swap(udp_ping_avg_, other->udp_ping_avg_);
  swap(udp_ping_var_, other->udp_ping_var_);
  swap(tcp_ping_avg_, other->tcp_ping_avg_);
  swap(tcp_ping_var_, other->tcp_ping_var_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Reject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reject::kTypeFieldNumber;
const int Reject::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reject::Reject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_Reject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Reject)
}
Reject::Reject(const Reject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Reject)
}

void Reject::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Reject::~Reject() {
  // @@protoc_insertion_point(destructor:MumbleProto.Reject)
  SharedDtor();
}

void Reject::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Reject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Reject::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reject& Reject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_Reject.base);
  return *internal_default_instance();
}


void Reject::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Reject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Reject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MumbleProto.Reject.RejectType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MumbleProto::Reject_RejectType_IsValid(value)) {
            set_type(static_cast< ::MumbleProto::Reject_RejectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Reject.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Reject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Reject)
  return false;
#undef DO_
}

void Reject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Reject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MumbleProto.Reject.RejectType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Reject.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Reject)
}

::google::protobuf::uint8* Reject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Reject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MumbleProto.Reject.RejectType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Reject.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Reject)
  return target;
}

size_t Reject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Reject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .MumbleProto.Reject.RejectType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Reject)
  GOOGLE_DCHECK_NE(&from, this);
  const Reject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Reject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Reject)
    MergeFrom(*source);
  }
}

void Reject::MergeFrom(const Reject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Reject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Reject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reject::CopyFrom(const Reject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Reject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reject::IsInitialized() const {
  return true;
}

void Reject::Swap(Reject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reject::InternalSwap(Reject* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Reject::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerSync::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerSync::kSessionFieldNumber;
const int ServerSync::kMaxBandwidthFieldNumber;
const int ServerSync::kWelcomeTextFieldNumber;
const int ServerSync::kPermissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerSync::ServerSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ServerSync.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ServerSync)
}
ServerSync::ServerSync(const ServerSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  welcome_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_welcome_text()) {
    welcome_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_text_);
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&session_)) + sizeof(permissions_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ServerSync)
}

void ServerSync::SharedCtor() {
  welcome_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permissions_) -
      reinterpret_cast<char*>(&session_)) + sizeof(permissions_));
}

ServerSync::~ServerSync() {
  // @@protoc_insertion_point(destructor:MumbleProto.ServerSync)
  SharedDtor();
}

void ServerSync::SharedDtor() {
  welcome_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerSync::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerSync& ServerSync::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ServerSync.base);
  return *internal_default_instance();
}


void ServerSync::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ServerSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    welcome_text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permissions_) -
        reinterpret_cast<char*>(&session_)) + sizeof(permissions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ServerSync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_bandwidth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string welcome_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_text().data(), static_cast<int>(this->welcome_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ServerSync.welcome_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 permissions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_permissions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permissions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ServerSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ServerSync)
  return false;
#undef DO_
}

void ServerSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ServerSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 max_bandwidth = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_bandwidth(), output);
  }

  // optional string welcome_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), static_cast<int>(this->welcome_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerSync.welcome_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->welcome_text(), output);
  }

  // optional uint64 permissions = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->permissions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ServerSync)
}

::google::protobuf::uint8* ServerSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ServerSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 max_bandwidth = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_bandwidth(), target);
  }

  // optional string welcome_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), static_cast<int>(this->welcome_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerSync.welcome_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->welcome_text(), target);
  }

  // optional uint64 permissions = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->permissions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ServerSync)
  return target;
}

size_t ServerSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ServerSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string welcome_text = 3;
    if (has_welcome_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_text());
    }

    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 max_bandwidth = 2;
    if (has_max_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bandwidth());
    }

    // optional uint64 permissions = 4;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permissions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ServerSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ServerSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ServerSync)
    MergeFrom(*source);
  }
}

void ServerSync::MergeFrom(const ServerSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ServerSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_welcome_text();
      welcome_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_bandwidth_ = from.max_bandwidth_;
    }
    if (cached_has_bits & 0x00000008u) {
      permissions_ = from.permissions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ServerSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSync::CopyFrom(const ServerSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ServerSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSync::IsInitialized() const {
  return true;
}

void ServerSync::Swap(ServerSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerSync::InternalSwap(ServerSync* other) {
  using std::swap;
  welcome_text_.Swap(&other->welcome_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
  swap(max_bandwidth_, other->max_bandwidth_);
  swap(permissions_, other->permissions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerSync::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelRemove::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelRemove::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelRemove::ChannelRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ChannelRemove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ChannelRemove)
}
ChannelRemove::ChannelRemove(const ChannelRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ChannelRemove)
}

void ChannelRemove::SharedCtor() {
  channel_id_ = 0u;
}

ChannelRemove::~ChannelRemove() {
  // @@protoc_insertion_point(destructor:MumbleProto.ChannelRemove)
  SharedDtor();
}

void ChannelRemove::SharedDtor() {
}

void ChannelRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelRemove::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelRemove& ChannelRemove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ChannelRemove.base);
  return *internal_default_instance();
}


void ChannelRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ChannelRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ChannelRemove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ChannelRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ChannelRemove)
  return false;
#undef DO_
}

void ChannelRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ChannelRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ChannelRemove)
}

::google::protobuf::uint8* ChannelRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ChannelRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ChannelRemove)
  return target;
}

size_t ChannelRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ChannelRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ChannelRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ChannelRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ChannelRemove)
    MergeFrom(*source);
  }
}

void ChannelRemove::MergeFrom(const ChannelRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ChannelRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void ChannelRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ChannelRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRemove::CopyFrom(const ChannelRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ChannelRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChannelRemove::Swap(ChannelRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelRemove::InternalSwap(ChannelRemove* other) {
  using std::swap;
  swap(channel_id_, other->channel_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelRemove::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelState::kChannelIdFieldNumber;
const int ChannelState::kParentFieldNumber;
const int ChannelState::kNameFieldNumber;
const int ChannelState::kLinksFieldNumber;
const int ChannelState::kDescriptionFieldNumber;
const int ChannelState::kLinksAddFieldNumber;
const int ChannelState::kLinksRemoveFieldNumber;
const int ChannelState::kTemporaryFieldNumber;
const int ChannelState::kPositionFieldNumber;
const int ChannelState::kDescriptionHashFieldNumber;
const int ChannelState::kMaxUsersFieldNumber;
const int ChannelState::kIsEnterRestrictedFieldNumber;
const int ChannelState::kCanEnterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelState::ChannelState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ChannelState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ChannelState)
}
ChannelState::ChannelState(const ChannelState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      links_(from.links_),
      links_add_(from.links_add_),
      links_remove_(from.links_remove_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  description_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description_hash()) {
    description_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_enter_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(can_enter_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ChannelState)
}

void ChannelState::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_enter_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(can_enter_));
}

ChannelState::~ChannelState() {
  // @@protoc_insertion_point(destructor:MumbleProto.ChannelState)
  SharedDtor();
}

void ChannelState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelState::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelState& ChannelState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ChannelState.base);
  return *internal_default_instance();
}


void ChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ChannelState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  links_add_.Clear();
  links_remove_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      description_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temporary_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(temporary_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&is_enter_restricted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_enter_) -
        reinterpret_cast<char*>(&is_enter_restricted_)) + sizeof(can_enter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ChannelState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_parent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ChannelState.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 links = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_links())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_links())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ChannelState.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 links_add = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_links_add())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_links_add())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 links_remove = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_links_remove())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_links_remove())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool temporary = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_temporary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &temporary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes description_hash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_users = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_enter_restricted = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_enter_restricted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enter_restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_enter = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_can_enter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_enter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ChannelState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ChannelState)
  return false;
#undef DO_
}

void ChannelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ChannelState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional uint32 parent = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated uint32 links = 4;
  for (int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->links(i), output);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // repeated uint32 links_add = 6;
  for (int i = 0, n = this->links_add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->links_add(i), output);
  }

  // repeated uint32 links_remove = 7;
  for (int i = 0, n = this->links_remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->links_remove(i), output);
  }

  // optional bool temporary = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->temporary(), output);
  }

  // optional int32 position = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(), output);
  }

  // optional bytes description_hash = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->description_hash(), output);
  }

  // optional uint32 max_users = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_users(), output);
  }

  // optional bool is_enter_restricted = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_enter_restricted(), output);
  }

  // optional bool can_enter = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->can_enter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ChannelState)
}

::google::protobuf::uint8* ChannelState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ChannelState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional uint32 parent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->parent(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated uint32 links = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->links_, target);

  // optional string description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // repeated uint32 links_add = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->links_add_, target);

  // repeated uint32 links_remove = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->links_remove_, target);

  // optional bool temporary = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->temporary(), target);
  }

  // optional int32 position = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->position(), target);
  }

  // optional bytes description_hash = 10;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->description_hash(), target);
  }

  // optional uint32 max_users = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_users(), target);
  }

  // optional bool is_enter_restricted = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_enter_restricted(), target);
  }

  // optional bool can_enter = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->can_enter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ChannelState)
  return target;
}

size_t ChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ChannelState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 links = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->links_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->links_size());
    total_size += data_size;
  }

  // repeated uint32 links_add = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->links_add_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->links_add_size());
    total_size += data_size;
  }

  // repeated uint32 links_remove = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->links_remove_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->links_remove_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bytes description_hash = 10;
    if (has_description_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description_hash());
    }

    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent());
    }

    // optional int32 position = 9 [default = 0];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional uint32 max_users = 11;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }

    // optional bool temporary = 8 [default = false];
    if (has_temporary()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool is_enter_restricted = 12;
    if (has_is_enter_restricted()) {
      total_size += 1 + 1;
    }

    // optional bool can_enter = 13;
    if (has_can_enter()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ChannelState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ChannelState)
    MergeFrom(*source);
  }
}

void ChannelState::MergeFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  links_add_.MergeFrom(from.links_add_);
  links_remove_.MergeFrom(from.links_remove_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_description_hash();
      description_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000020u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_users_ = from.max_users_;
    }
    if (cached_has_bits & 0x00000080u) {
      temporary_ = from.temporary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      is_enter_restricted_ = from.is_enter_restricted_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_enter_ = from.can_enter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelState::CopyFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelState::IsInitialized() const {
  return true;
}

void ChannelState::Swap(ChannelState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelState::InternalSwap(ChannelState* other) {
  using std::swap;
  links_.InternalSwap(&other->links_);
  links_add_.InternalSwap(&other->links_add_);
  links_remove_.InternalSwap(&other->links_remove_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_hash_.Swap(&other->description_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_id_, other->channel_id_);
  swap(parent_, other->parent_);
  swap(position_, other->position_);
  swap(max_users_, other->max_users_);
  swap(temporary_, other->temporary_);
  swap(is_enter_restricted_, other->is_enter_restricted_);
  swap(can_enter_, other->can_enter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelState::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserRemove::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRemove::kSessionFieldNumber;
const int UserRemove::kActorFieldNumber;
const int UserRemove::kReasonFieldNumber;
const int UserRemove::kBanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRemove::UserRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserRemove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserRemove)
}
UserRemove::UserRemove(const UserRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_) -
    reinterpret_cast<char*>(&session_)) + sizeof(ban_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserRemove)
}

void UserRemove::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_) -
      reinterpret_cast<char*>(&session_)) + sizeof(ban_));
}

UserRemove::~UserRemove() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserRemove)
  SharedDtor();
}

void UserRemove::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRemove::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRemove& UserRemove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserRemove.base);
  return *internal_default_instance();
}


void UserRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ban_) -
        reinterpret_cast<char*>(&session_)) + sizeof(ban_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserRemove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserRemove.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ban = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ban();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserRemove)
  return false;
#undef DO_
}

void UserRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 session = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 actor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor(), output);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserRemove.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional bool ban = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ban(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserRemove)
}

::google::protobuf::uint8* UserRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 session = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 actor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actor(), target);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserRemove.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // optional bool ban = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ban(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserRemove)
  return target;
}

size_t UserRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 session = 1;
  if (has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session());
  }
  // optional string reason = 3;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 actor = 2;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actor());
    }

    // optional bool ban = 4;
    if (has_ban()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserRemove)
    MergeFrom(*source);
  }
}

void UserRemove::MergeFrom(const UserRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000004u) {
      actor_ = from.actor_;
    }
    if (cached_has_bits & 0x00000008u) {
      ban_ = from.ban_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRemove::CopyFrom(const UserRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UserRemove::Swap(UserRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRemove::InternalSwap(UserRemove* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
  swap(actor_, other->actor_);
  swap(ban_, other->ban_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRemove::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserState_VolumeAdjustment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserState_VolumeAdjustment::kListeningChannelFieldNumber;
const int UserState_VolumeAdjustment::kVolumeAdjustmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserState_VolumeAdjustment::UserState_VolumeAdjustment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserState_VolumeAdjustment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserState.VolumeAdjustment)
}
UserState_VolumeAdjustment::UserState_VolumeAdjustment(const UserState_VolumeAdjustment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&listening_channel_, &from.listening_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_adjustment_) -
    reinterpret_cast<char*>(&listening_channel_)) + sizeof(volume_adjustment_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserState.VolumeAdjustment)
}

void UserState_VolumeAdjustment::SharedCtor() {
  ::memset(&listening_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_adjustment_) -
      reinterpret_cast<char*>(&listening_channel_)) + sizeof(volume_adjustment_));
}

UserState_VolumeAdjustment::~UserState_VolumeAdjustment() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserState.VolumeAdjustment)
  SharedDtor();
}

void UserState_VolumeAdjustment::SharedDtor() {
}

void UserState_VolumeAdjustment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserState_VolumeAdjustment::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserState_VolumeAdjustment& UserState_VolumeAdjustment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserState_VolumeAdjustment.base);
  return *internal_default_instance();
}


void UserState_VolumeAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserState.VolumeAdjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&listening_channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volume_adjustment_) -
        reinterpret_cast<char*>(&listening_channel_)) + sizeof(volume_adjustment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserState_VolumeAdjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserState.VolumeAdjustment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 listening_channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_listening_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listening_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float volume_adjustment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_volume_adjustment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_adjustment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserState.VolumeAdjustment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserState.VolumeAdjustment)
  return false;
#undef DO_
}

void UserState_VolumeAdjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserState.VolumeAdjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 listening_channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listening_channel(), output);
  }

  // optional float volume_adjustment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->volume_adjustment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserState.VolumeAdjustment)
}

::google::protobuf::uint8* UserState_VolumeAdjustment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserState.VolumeAdjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 listening_channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listening_channel(), target);
  }

  // optional float volume_adjustment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->volume_adjustment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserState.VolumeAdjustment)
  return target;
}

size_t UserState_VolumeAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserState.VolumeAdjustment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 listening_channel = 1;
    if (has_listening_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listening_channel());
    }

    // optional float volume_adjustment = 2;
    if (has_volume_adjustment()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserState_VolumeAdjustment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserState.VolumeAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  const UserState_VolumeAdjustment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserState_VolumeAdjustment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserState.VolumeAdjustment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserState.VolumeAdjustment)
    MergeFrom(*source);
  }
}

void UserState_VolumeAdjustment::MergeFrom(const UserState_VolumeAdjustment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserState.VolumeAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      listening_channel_ = from.listening_channel_;
    }
    if (cached_has_bits & 0x00000002u) {
      volume_adjustment_ = from.volume_adjustment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserState_VolumeAdjustment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserState.VolumeAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserState_VolumeAdjustment::CopyFrom(const UserState_VolumeAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserState.VolumeAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserState_VolumeAdjustment::IsInitialized() const {
  return true;
}

void UserState_VolumeAdjustment::Swap(UserState_VolumeAdjustment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserState_VolumeAdjustment::InternalSwap(UserState_VolumeAdjustment* other) {
  using std::swap;
  swap(listening_channel_, other->listening_channel_);
  swap(volume_adjustment_, other->volume_adjustment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserState_VolumeAdjustment::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserState::kSessionFieldNumber;
const int UserState::kActorFieldNumber;
const int UserState::kNameFieldNumber;
const int UserState::kUserIdFieldNumber;
const int UserState::kChannelIdFieldNumber;
const int UserState::kMuteFieldNumber;
const int UserState::kDeafFieldNumber;
const int UserState::kSuppressFieldNumber;
const int UserState::kSelfMuteFieldNumber;
const int UserState::kSelfDeafFieldNumber;
const int UserState::kTextureFieldNumber;
const int UserState::kPluginContextFieldNumber;
const int UserState::kPluginIdentityFieldNumber;
const int UserState::kCommentFieldNumber;
const int UserState::kHashFieldNumber;
const int UserState::kCommentHashFieldNumber;
const int UserState::kTextureHashFieldNumber;
const int UserState::kPrioritySpeakerFieldNumber;
const int UserState::kRecordingFieldNumber;
const int UserState::kTemporaryAccessTokensFieldNumber;
const int UserState::kListeningChannelAddFieldNumber;
const int UserState::kListeningChannelRemoveFieldNumber;
const int UserState::kListeningVolumeAdjustmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserState::UserState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserState)
}
UserState::UserState(const UserState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      temporary_access_tokens_(from.temporary_access_tokens_),
      listening_channel_add_(from.listening_channel_add_),
      listening_channel_remove_(from.listening_channel_remove_),
      listening_volume_adjustment_(from.listening_volume_adjustment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texture()) {
    texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
  }
  plugin_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugin_context()) {
    plugin_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_context_);
  }
  plugin_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugin_identity()) {
    plugin_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_identity_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  comment_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment_hash()) {
    comment_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_hash_);
  }
  texture_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texture_hash()) {
    texture_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_hash_);
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&recording_) -
    reinterpret_cast<char*>(&session_)) + sizeof(recording_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserState)
}

void UserState::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_) -
      reinterpret_cast<char*>(&session_)) + sizeof(recording_));
}

UserState::~UserState() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserState)
  SharedDtor();
}

void UserState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserState::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserState& UserState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserState.base);
  return *internal_default_instance();
}


void UserState::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temporary_access_tokens_.Clear();
  listening_channel_add_.Clear();
  listening_channel_remove_.Clear();
  listening_volume_adjustment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      texture_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      plugin_context_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      plugin_identity_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      comment_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      texture_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&self_mute_) -
        reinterpret_cast<char*>(&session_)) + sizeof(self_mute_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&self_deaf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recording_) -
        reinterpret_cast<char*>(&self_deaf_)) + sizeof(recording_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deaf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_deaf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deaf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool suppress = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_suppress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool self_mute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_self_mute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool self_deaf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_self_deaf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_deaf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes texture = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes plugin_context = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plugin_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plugin_identity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin_identity().data(), static_cast<int>(this->plugin_identity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.plugin_identity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes comment_hash = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_comment_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes texture_hash = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool priority_speaker = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_priority_speaker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &priority_speaker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool recording = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_recording();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string temporary_access_tokens = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_temporary_access_tokens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->temporary_access_tokens(this->temporary_access_tokens_size() - 1).data(),
            static_cast<int>(this->temporary_access_tokens(this->temporary_access_tokens_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.temporary_access_tokens");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 listening_channel_add = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168u, input, this->mutable_listening_channel_add())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listening_channel_add())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 listening_channel_remove = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_listening_channel_remove())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listening_channel_remove())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MumbleProto.UserState.VolumeAdjustment listening_volume_adjustment = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listening_volume_adjustment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserState)
  return false;
#undef DO_
}

void UserState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 actor = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // optional uint32 channel_id = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional bool mute = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mute(), output);
  }

  // optional bool deaf = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->deaf(), output);
  }

  // optional bool suppress = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->suppress(), output);
  }

  // optional bool self_mute = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->self_mute(), output);
  }

  // optional bool self_deaf = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->self_deaf(), output);
  }

  // optional bytes texture = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->texture(), output);
  }

  // optional bytes plugin_context = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->plugin_context(), output);
  }

  // optional string plugin_identity = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_identity().data(), static_cast<int>(this->plugin_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.plugin_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->plugin_identity(), output);
  }

  // optional string comment = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->comment(), output);
  }

  // optional string hash = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->hash(), output);
  }

  // optional bytes comment_hash = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->comment_hash(), output);
  }

  // optional bytes texture_hash = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->texture_hash(), output);
  }

  // optional bool priority_speaker = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->priority_speaker(), output);
  }

  // optional bool recording = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->recording(), output);
  }

  // repeated string temporary_access_tokens = 20;
  for (int i = 0, n = this->temporary_access_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->temporary_access_tokens(i).data(), static_cast<int>(this->temporary_access_tokens(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.temporary_access_tokens");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->temporary_access_tokens(i), output);
  }

  // repeated uint32 listening_channel_add = 21;
  for (int i = 0, n = this->listening_channel_add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->listening_channel_add(i), output);
  }

  // repeated uint32 listening_channel_remove = 22;
  for (int i = 0, n = this->listening_channel_remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->listening_channel_remove(i), output);
  }

  // repeated .MumbleProto.UserState.VolumeAdjustment listening_volume_adjustment = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listening_volume_adjustment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->listening_volume_adjustment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserState)
}

::google::protobuf::uint8* UserState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 actor = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actor(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  // optional uint32 channel_id = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional bool mute = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mute(), target);
  }

  // optional bool deaf = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->deaf(), target);
  }

  // optional bool suppress = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->suppress(), target);
  }

  // optional bool self_mute = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->self_mute(), target);
  }

  // optional bool self_deaf = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->self_deaf(), target);
  }

  // optional bytes texture = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->texture(), target);
  }

  // optional bytes plugin_context = 12;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->plugin_context(), target);
  }

  // optional string plugin_identity = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_identity().data(), static_cast<int>(this->plugin_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.plugin_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->plugin_identity(), target);
  }

  // optional string comment = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->comment(), target);
  }

  // optional string hash = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hash(), target);
  }

  // optional bytes comment_hash = 16;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->comment_hash(), target);
  }

  // optional bytes texture_hash = 17;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->texture_hash(), target);
  }

  // optional bool priority_speaker = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->priority_speaker(), target);
  }

  // optional bool recording = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->recording(), target);
  }

  // repeated string temporary_access_tokens = 20;
  for (int i = 0, n = this->temporary_access_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->temporary_access_tokens(i).data(), static_cast<int>(this->temporary_access_tokens(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.temporary_access_tokens");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->temporary_access_tokens(i), target);
  }

  // repeated uint32 listening_channel_add = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(21, this->listening_channel_add_, target);

  // repeated uint32 listening_channel_remove = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->listening_channel_remove_, target);

  // repeated .MumbleProto.UserState.VolumeAdjustment listening_volume_adjustment = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listening_volume_adjustment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->listening_volume_adjustment(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserState)
  return target;
}

size_t UserState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string temporary_access_tokens = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->temporary_access_tokens_size());
  for (int i = 0, n = this->temporary_access_tokens_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->temporary_access_tokens(i));
  }

  // repeated uint32 listening_channel_add = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->listening_channel_add_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->listening_channel_add_size());
    total_size += data_size;
  }

  // repeated uint32 listening_channel_remove = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->listening_channel_remove_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->listening_channel_remove_size());
    total_size += data_size;
  }

  // repeated .MumbleProto.UserState.VolumeAdjustment listening_volume_adjustment = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->listening_volume_adjustment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listening_volume_adjustment(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes texture = 11;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture());
    }

    // optional bytes plugin_context = 12;
    if (has_plugin_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->plugin_context());
    }

    // optional string plugin_identity = 13;
    if (has_plugin_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin_identity());
    }

    // optional string comment = 14;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string hash = 15;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional bytes comment_hash = 16;
    if (has_comment_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->comment_hash());
    }

    // optional bytes texture_hash = 17;
    if (has_texture_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture_hash());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 actor = 2;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actor());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional bool mute = 6;
    if (has_mute()) {
      total_size += 1 + 1;
    }

    // optional bool deaf = 7;
    if (has_deaf()) {
      total_size += 1 + 1;
    }

    // optional bool suppress = 8;
    if (has_suppress()) {
      total_size += 1 + 1;
    }

    // optional bool self_mute = 9;
    if (has_self_mute()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional bool self_deaf = 10;
    if (has_self_deaf()) {
      total_size += 1 + 1;
    }

    // optional bool priority_speaker = 18;
    if (has_priority_speaker()) {
      total_size += 2 + 1;
    }

    // optional bool recording = 19;
    if (has_recording()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserState)
  GOOGLE_DCHECK_NE(&from, this);
  const UserState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserState)
    MergeFrom(*source);
  }
}

void UserState::MergeFrom(const UserState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temporary_access_tokens_.MergeFrom(from.temporary_access_tokens_);
  listening_channel_add_.MergeFrom(from.listening_channel_add_);
  listening_channel_remove_.MergeFrom(from.listening_channel_remove_);
  listening_volume_adjustment_.MergeFrom(from.listening_volume_adjustment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_texture();
      texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_plugin_context();
      plugin_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_context_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_plugin_identity();
      plugin_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_identity_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_comment_hash();
      comment_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_hash_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_texture_hash();
      texture_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_hash_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000200u) {
      actor_ = from.actor_;
    }
    if (cached_has_bits & 0x00000400u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      mute_ = from.mute_;
    }
    if (cached_has_bits & 0x00002000u) {
      deaf_ = from.deaf_;
    }
    if (cached_has_bits & 0x00004000u) {
      suppress_ = from.suppress_;
    }
    if (cached_has_bits & 0x00008000u) {
      self_mute_ = from.self_mute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      self_deaf_ = from.self_deaf_;
    }
    if (cached_has_bits & 0x00020000u) {
      priority_speaker_ = from.priority_speaker_;
    }
    if (cached_has_bits & 0x00040000u) {
      recording_ = from.recording_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserState::CopyFrom(const UserState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserState::IsInitialized() const {
  return true;
}

void UserState::Swap(UserState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserState::InternalSwap(UserState* other) {
  using std::swap;
  temporary_access_tokens_.InternalSwap(CastToBase(&other->temporary_access_tokens_));
  listening_channel_add_.InternalSwap(&other->listening_channel_add_);
  listening_channel_remove_.InternalSwap(&other->listening_channel_remove_);
  CastToBase(&listening_volume_adjustment_)->InternalSwap(CastToBase(&other->listening_volume_adjustment_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_.Swap(&other->texture_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plugin_context_.Swap(&other->plugin_context_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plugin_identity_.Swap(&other->plugin_identity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_hash_.Swap(&other->comment_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_hash_.Swap(&other->texture_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
  swap(actor_, other->actor_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
  swap(mute_, other->mute_);
  swap(deaf_, other->deaf_);
  swap(suppress_, other->suppress_);
  swap(self_mute_, other->self_mute_);
  swap(self_deaf_, other->self_deaf_);
  swap(priority_speaker_, other->priority_speaker_);
  swap(recording_, other->recording_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserState::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BanList_BanEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanList_BanEntry::kAddressFieldNumber;
const int BanList_BanEntry::kMaskFieldNumber;
const int BanList_BanEntry::kNameFieldNumber;
const int BanList_BanEntry::kHashFieldNumber;
const int BanList_BanEntry::kReasonFieldNumber;
const int BanList_BanEntry::kStartFieldNumber;
const int BanList_BanEntry::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanList_BanEntry::BanList_BanEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_BanList_BanEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.BanList.BanEntry)
}
BanList_BanEntry::BanList_BanEntry(const BanList_BanEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start()) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  ::memcpy(&mask_, &from.mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&mask_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.BanList.BanEntry)
}

void BanList_BanEntry::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(duration_));
}

BanList_BanEntry::~BanList_BanEntry() {
  // @@protoc_insertion_point(destructor:MumbleProto.BanList.BanEntry)
  SharedDtor();
}

void BanList_BanEntry::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BanList_BanEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BanList_BanEntry::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BanList_BanEntry& BanList_BanEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_BanList_BanEntry.base);
  return *internal_default_instance();
}


void BanList_BanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.BanList.BanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      start_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&mask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&mask_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BanList_BanEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.BanList.BanEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start().data(), static_cast<int>(this->start().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.start");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.BanList.BanEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.BanList.BanEntry)
  return false;
#undef DO_
}

void BanList_BanEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.BanList.BanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // required uint32 mask = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mask(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hash(), output);
  }

  // optional string reason = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  // optional string start = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start().data(), static_cast<int>(this->start().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start(), output);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.BanList.BanEntry)
}

::google::protobuf::uint8* BanList_BanEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.BanList.BanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // required uint32 mask = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mask(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hash(), target);
  }

  // optional string reason = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional string start = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start().data(), static_cast<int>(this->start().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start(), target);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.BanList.BanEntry)
  return target;
}

size_t BanList_BanEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MumbleProto.BanList.BanEntry)
  size_t total_size = 0;

  if (has_address()) {
    // required bytes address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  if (has_mask()) {
    // required uint32 mask = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());
  }

  return total_size;
}
size_t BanList_BanEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.BanList.BanEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required bytes address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());

    // required uint32 mask = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hash = 4;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string start = 6;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start());
    }

  }
  // optional uint32 duration = 7;
  if (has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanList_BanEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.BanList.BanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const BanList_BanEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BanList_BanEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.BanList.BanEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.BanList.BanEntry)
    MergeFrom(*source);
  }
}

void BanList_BanEntry::MergeFrom(const BanList_BanEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.BanList.BanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_start();
      start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
    }
    if (cached_has_bits & 0x00000020u) {
      mask_ = from.mask_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BanList_BanEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.BanList.BanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanList_BanEntry::CopyFrom(const BanList_BanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.BanList.BanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanList_BanEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  return true;
}

void BanList_BanEntry::Swap(BanList_BanEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanList_BanEntry::InternalSwap(BanList_BanEntry* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_.Swap(&other->start_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mask_, other->mask_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BanList_BanEntry::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BanList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanList::kBansFieldNumber;
const int BanList::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanList::BanList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_BanList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.BanList)
}
BanList::BanList(const BanList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:MumbleProto.BanList)
}

void BanList::SharedCtor() {
  query_ = false;
}

BanList::~BanList() {
  // @@protoc_insertion_point(destructor:MumbleProto.BanList)
  SharedDtor();
}

void BanList::SharedDtor() {
}

void BanList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BanList::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BanList& BanList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_BanList.base);
  return *internal_default_instance();
}


void BanList::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.BanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bans_.Clear();
  query_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.BanList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MumbleProto.BanList.BanEntry bans = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool query = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.BanList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.BanList)
  return false;
#undef DO_
}

void BanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.BanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MumbleProto.BanList.BanEntry bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bans(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool query = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.BanList)
}

::google::protobuf::uint8* BanList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.BanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MumbleProto.BanList.BanEntry bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bans(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool query = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.BanList)
  return target;
}

size_t BanList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.BanList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MumbleProto.BanList.BanEntry bans = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bans(static_cast<int>(i)));
    }
  }

  // optional bool query = 2 [default = false];
  if (has_query()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.BanList)
  GOOGLE_DCHECK_NE(&from, this);
  const BanList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BanList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.BanList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.BanList)
    MergeFrom(*source);
  }
}

void BanList::MergeFrom(const BanList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.BanList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bans_.MergeFrom(from.bans_);
  if (from.has_query()) {
    set_query(from.query());
  }
}

void BanList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.BanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanList::CopyFrom(const BanList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.BanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->bans())) return false;
  return true;
}

void BanList::Swap(BanList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanList::InternalSwap(BanList* other) {
  using std::swap;
  CastToBase(&bans_)->InternalSwap(CastToBase(&other->bans_));
  swap(query_, other->query_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BanList::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TextMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage::kActorFieldNumber;
const int TextMessage::kSessionFieldNumber;
const int TextMessage::kChannelIdFieldNumber;
const int TextMessage::kTreeIdFieldNumber;
const int TextMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage::TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_TextMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.TextMessage)
}
TextMessage::TextMessage(const TextMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      session_(from.session_),
      channel_id_(from.channel_id_),
      tree_id_(from.tree_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  actor_ = from.actor_;
  // @@protoc_insertion_point(copy_constructor:MumbleProto.TextMessage)
}

void TextMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actor_ = 0u;
}

TextMessage::~TextMessage() {
  // @@protoc_insertion_point(destructor:MumbleProto.TextMessage)
  SharedDtor();
}

void TextMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TextMessage::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMessage& TextMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_TextMessage.base);
  return *internal_default_instance();
}


void TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.Clear();
  channel_id_.Clear();
  tree_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  actor_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.TextMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 actor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_session())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_channel_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tree_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_tree_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tree_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.TextMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.TextMessage)
  return false;
#undef DO_
}

void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 actor = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actor(), output);
  }

  // repeated uint32 session = 2;
  for (int i = 0, n = this->session_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->session(i), output);
  }

  // repeated uint32 channel_id = 3;
  for (int i = 0, n = this->channel_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channel_id(i), output);
  }

  // repeated uint32 tree_id = 4;
  for (int i = 0, n = this->tree_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->tree_id(i), output);
  }

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.TextMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.TextMessage)
}

::google::protobuf::uint8* TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 actor = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actor(), target);
  }

  // repeated uint32 session = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->session_, target);

  // repeated uint32 channel_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->channel_id_, target);

  // repeated uint32 tree_id = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->tree_id_, target);

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.TextMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.TextMessage)
  return target;
}

size_t TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.TextMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string message = 5;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  // repeated uint32 session = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->session_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->session_size());
    total_size += data_size;
  }

  // repeated uint32 channel_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channel_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channel_id_size());
    total_size += data_size;
  }

  // repeated uint32 tree_id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tree_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tree_id_size());
    total_size += data_size;
  }

  // optional uint32 actor = 1;
  if (has_actor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.TextMessage)
    MergeFrom(*source);
  }
}

void TextMessage::MergeFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_.MergeFrom(from.session_);
  channel_id_.MergeFrom(from.channel_id_);
  tree_id_.MergeFrom(from.tree_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      actor_ = from.actor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage::CopyFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TextMessage::Swap(TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage::InternalSwap(TextMessage* other) {
  using std::swap;
  session_.InternalSwap(&other->session_);
  channel_id_.InternalSwap(&other->channel_id_);
  tree_id_.InternalSwap(&other->tree_id_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actor_, other->actor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TextMessage::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PermissionDenied::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermissionDenied::kPermissionFieldNumber;
const int PermissionDenied::kChannelIdFieldNumber;
const int PermissionDenied::kSessionFieldNumber;
const int PermissionDenied::kReasonFieldNumber;
const int PermissionDenied::kTypeFieldNumber;
const int PermissionDenied::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermissionDenied::PermissionDenied()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_PermissionDenied.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.PermissionDenied)
}
PermissionDenied::PermissionDenied(const PermissionDenied& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&permission_, &from.permission_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&permission_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.PermissionDenied)
}

void PermissionDenied::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&permission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&permission_)) + sizeof(type_));
}

PermissionDenied::~PermissionDenied() {
  // @@protoc_insertion_point(destructor:MumbleProto.PermissionDenied)
  SharedDtor();
}

void PermissionDenied::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PermissionDenied::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PermissionDenied::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PermissionDenied& PermissionDenied::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_PermissionDenied.base);
  return *internal_default_instance();
}


void PermissionDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.PermissionDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&permission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&permission_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PermissionDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.PermissionDenied)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 session = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.PermissionDenied.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MumbleProto.PermissionDenied.DenyType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MumbleProto::PermissionDenied_DenyType_IsValid(value)) {
            set_type(static_cast< ::MumbleProto::PermissionDenied_DenyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.PermissionDenied.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.PermissionDenied)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.PermissionDenied)
  return false;
#undef DO_
}

void PermissionDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.PermissionDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permission = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->permission(), output);
  }

  // optional uint32 channel_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint32 session = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session(), output);
  }

  // optional string reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // optional .MumbleProto.PermissionDenied.DenyType type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.PermissionDenied)
}

::google::protobuf::uint8* PermissionDenied::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PermissionDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permission = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->permission(), target);
  }

  // optional uint32 channel_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint32 session = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session(), target);
  }

  // optional string reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // optional .MumbleProto.PermissionDenied.DenyType type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PermissionDenied)
  return target;
}

size_t PermissionDenied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.PermissionDenied)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permission());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional .MumbleProto.PermissionDenied.DenyType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PermissionDenied::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.PermissionDenied)
  GOOGLE_DCHECK_NE(&from, this);
  const PermissionDenied* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PermissionDenied>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.PermissionDenied)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.PermissionDenied)
    MergeFrom(*source);
  }
}

void PermissionDenied::MergeFrom(const PermissionDenied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.PermissionDenied)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PermissionDenied::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.PermissionDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermissionDenied::CopyFrom(const PermissionDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.PermissionDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionDenied::IsInitialized() const {
  return true;
}

void PermissionDenied::Swap(PermissionDenied* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermissionDenied::InternalSwap(PermissionDenied* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(permission_, other->permission_);
  swap(channel_id_, other->channel_id_);
  swap(session_, other->session_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PermissionDenied::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL_ChanGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_ChanGroup::kNameFieldNumber;
const int ACL_ChanGroup::kInheritedFieldNumber;
const int ACL_ChanGroup::kInheritFieldNumber;
const int ACL_ChanGroup::kInheritableFieldNumber;
const int ACL_ChanGroup::kAddFieldNumber;
const int ACL_ChanGroup::kRemoveFieldNumber;
const int ACL_ChanGroup::kInheritedMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_ChanGroup::ACL_ChanGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ACL_ChanGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ACL.ChanGroup)
}
ACL_ChanGroup::ACL_ChanGroup(const ACL_ChanGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      add_(from.add_),
      remove_(from.remove_),
      inherited_members_(from.inherited_members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&inherited_, &from.inherited_,
    static_cast<size_t>(reinterpret_cast<char*>(&inheritable_) -
    reinterpret_cast<char*>(&inherited_)) + sizeof(inheritable_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL.ChanGroup)
}

void ACL_ChanGroup::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inherited_ = true;
  inherit_ = true;
  inheritable_ = true;
}

ACL_ChanGroup::~ACL_ChanGroup() {
  // @@protoc_insertion_point(destructor:MumbleProto.ACL.ChanGroup)
  SharedDtor();
}

void ACL_ChanGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ACL_ChanGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL_ChanGroup::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL_ChanGroup& ACL_ChanGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ACL_ChanGroup.base);
  return *internal_default_instance();
}


void ACL_ChanGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ACL.ChanGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  add_.Clear();
  remove_.Clear();
  inherited_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    inherited_ = true;
    inherit_ = true;
    inheritable_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL_ChanGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ACL.ChanGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ACL.ChanGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherited = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_inherited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_inherit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inheritable = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_inheritable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 add = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_add())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_add())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 remove = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_remove())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remove())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inherited_members = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_inherited_members())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inherited_members())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ACL.ChanGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ACL.ChanGroup)
  return false;
#undef DO_
}

void ACL_ChanGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ACL.ChanGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool inherited = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherited(), output);
  }

  // optional bool inherit = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherit(), output);
  }

  // optional bool inheritable = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inheritable(), output);
  }

  // repeated uint32 add = 5;
  for (int i = 0, n = this->add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->add(i), output);
  }

  // repeated uint32 remove = 6;
  for (int i = 0, n = this->remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->remove(i), output);
  }

  // repeated uint32 inherited_members = 7;
  for (int i = 0, n = this->inherited_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->inherited_members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ACL.ChanGroup)
}

::google::protobuf::uint8* ACL_ChanGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL.ChanGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool inherited = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inherited(), target);
  }

  // optional bool inherit = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inherit(), target);
  }

  // optional bool inheritable = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->inheritable(), target);
  }

  // repeated uint32 add = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->add_, target);

  // repeated uint32 remove = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->remove_, target);

  // repeated uint32 inherited_members = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->inherited_members_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL.ChanGroup)
  return target;
}

size_t ACL_ChanGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ACL.ChanGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated uint32 add = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->add_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->add_size());
    total_size += data_size;
  }

  // repeated uint32 remove = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->remove_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->remove_size());
    total_size += data_size;
  }

  // repeated uint32 inherited_members = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inherited_members_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->inherited_members_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional bool inherited = 2 [default = true];
    if (has_inherited()) {
      total_size += 1 + 1;
    }

    // optional bool inherit = 3 [default = true];
    if (has_inherit()) {
      total_size += 1 + 1;
    }

    // optional bool inheritable = 4 [default = true];
    if (has_inheritable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL_ChanGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ACL.ChanGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL_ChanGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_ChanGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ACL.ChanGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ACL.ChanGroup)
    MergeFrom(*source);
  }
}

void ACL_ChanGroup::MergeFrom(const ACL_ChanGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ACL.ChanGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  add_.MergeFrom(from.add_);
  remove_.MergeFrom(from.remove_);
  inherited_members_.MergeFrom(from.inherited_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      inherited_ = from.inherited_;
    }
    if (cached_has_bits & 0x00000004u) {
      inherit_ = from.inherit_;
    }
    if (cached_has_bits & 0x00000008u) {
      inheritable_ = from.inheritable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACL_ChanGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ACL.ChanGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_ChanGroup::CopyFrom(const ACL_ChanGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ACL.ChanGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_ChanGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ACL_ChanGroup::Swap(ACL_ChanGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_ChanGroup::InternalSwap(ACL_ChanGroup* other) {
  using std::swap;
  add_.InternalSwap(&other->add_);
  remove_.InternalSwap(&other->remove_);
  inherited_members_.InternalSwap(&other->inherited_members_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inherited_, other->inherited_);
  swap(inherit_, other->inherit_);
  swap(inheritable_, other->inheritable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL_ChanGroup::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL_ChanACL::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_ChanACL::kApplyHereFieldNumber;
const int ACL_ChanACL::kApplySubsFieldNumber;
const int ACL_ChanACL::kInheritedFieldNumber;
const int ACL_ChanACL::kUserIdFieldNumber;
const int ACL_ChanACL::kGroupFieldNumber;
const int ACL_ChanACL::kGrantFieldNumber;
const int ACL_ChanACL::kDenyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_ChanACL::ACL_ChanACL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ACL_ChanACL.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ACL.ChanACL)
}
ACL_ChanACL::ACL_ChanACL(const ACL_ChanACL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group()) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inherited_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(inherited_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL.ChanACL)
}

void ACL_ChanACL::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deny_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(deny_));
  apply_here_ = true;
  apply_subs_ = true;
  inherited_ = true;
}

ACL_ChanACL::~ACL_ChanACL() {
  // @@protoc_insertion_point(destructor:MumbleProto.ACL.ChanACL)
  SharedDtor();
}

void ACL_ChanACL::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ACL_ChanACL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL_ChanACL::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL_ChanACL& ACL_ChanACL::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ACL_ChanACL.base);
  return *internal_default_instance();
}


void ACL_ChanACL::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ACL.ChanACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    group_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deny_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(deny_));
    apply_here_ = true;
    apply_subs_ = true;
    inherited_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL_ChanACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ACL.ChanACL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool apply_here = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_apply_here();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_here_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool apply_subs = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_apply_subs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_subs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherited = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_inherited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string group = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ACL.ChanACL.group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 grant = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_grant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deny = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_deny();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ACL.ChanACL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ACL.ChanACL)
  return false;
#undef DO_
}

void ACL_ChanACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ACL.ChanACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool apply_here = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->apply_here(), output);
  }

  // optional bool apply_subs = 2 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->apply_subs(), output);
  }

  // optional bool inherited = 3 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherited(), output);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // optional string group = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanACL.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group(), output);
  }

  // optional uint32 grant = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grant(), output);
  }

  // optional uint32 deny = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deny(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ACL.ChanACL)
}

::google::protobuf::uint8* ACL_ChanACL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL.ChanACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool apply_here = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->apply_here(), target);
  }

  // optional bool apply_subs = 2 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->apply_subs(), target);
  }

  // optional bool inherited = 3 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inherited(), target);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  // optional string group = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanACL.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group(), target);
  }

  // optional uint32 grant = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grant(), target);
  }

  // optional uint32 deny = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deny(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL.ChanACL)
  return target;
}

size_t ACL_ChanACL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ACL.ChanACL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 grant = 6;
    if (has_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grant());
    }

    // optional uint32 deny = 7;
    if (has_deny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deny());
    }

    // optional bool apply_here = 1 [default = true];
    if (has_apply_here()) {
      total_size += 1 + 1;
    }

    // optional bool apply_subs = 2 [default = true];
    if (has_apply_subs()) {
      total_size += 1 + 1;
    }

    // optional bool inherited = 3 [default = true];
    if (has_inherited()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL_ChanACL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ACL.ChanACL)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL_ChanACL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_ChanACL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ACL.ChanACL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ACL.ChanACL)
    MergeFrom(*source);
  }
}

void ACL_ChanACL::MergeFrom(const ACL_ChanACL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ACL.ChanACL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group();
      group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      grant_ = from.grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      deny_ = from.deny_;
    }
    if (cached_has_bits & 0x00000010u) {
      apply_here_ = from.apply_here_;
    }
    if (cached_has_bits & 0x00000020u) {
      apply_subs_ = from.apply_subs_;
    }
    if (cached_has_bits & 0x00000040u) {
      inherited_ = from.inherited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACL_ChanACL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ACL.ChanACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_ChanACL::CopyFrom(const ACL_ChanACL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ACL.ChanACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_ChanACL::IsInitialized() const {
  return true;
}

void ACL_ChanACL::Swap(ACL_ChanACL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_ChanACL::InternalSwap(ACL_ChanACL* other) {
  using std::swap;
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(grant_, other->grant_);
  swap(deny_, other->deny_);
  swap(apply_here_, other->apply_here_);
  swap(apply_subs_, other->apply_subs_);
  swap(inherited_, other->inherited_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL_ChanACL::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL::kChannelIdFieldNumber;
const int ACL::kInheritAclsFieldNumber;
const int ACL::kGroupsFieldNumber;
const int ACL::kAclsFieldNumber;
const int ACL::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL::ACL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ACL.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ACL)
}
ACL::ACL(const ACL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      groups_(from.groups_),
      acls_(from.acls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inherit_acls_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(inherit_acls_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL)
}

void ACL::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(query_));
  inherit_acls_ = true;
}

ACL::~ACL() {
  // @@protoc_insertion_point(destructor:MumbleProto.ACL)
  SharedDtor();
}

void ACL::SharedDtor() {
}

void ACL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL& ACL::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ACL.base);
  return *internal_default_instance();
}


void ACL::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  acls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(query_));
    inherit_acls_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ACL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit_acls = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_inherit_acls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_acls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MumbleProto.ACL.ChanGroup groups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MumbleProto.ACL.ChanACL acls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool query = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ACL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ACL)
  return false;
#undef DO_
}

void ACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional bool inherit_acls = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherit_acls(), output);
  }

  // repeated .MumbleProto.ACL.ChanGroup groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->groups(static_cast<int>(i)),
      output);
  }

  // repeated .MumbleProto.ACL.ChanACL acls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->acls(static_cast<int>(i)),
      output);
  }

  // optional bool query = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ACL)
}

::google::protobuf::uint8* ACL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional bool inherit_acls = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inherit_acls(), target);
  }

  // repeated .MumbleProto.ACL.ChanGroup groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->groups(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MumbleProto.ACL.ChanACL acls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->acls(static_cast<int>(i)), deterministic, target);
  }

  // optional bool query = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL)
  return target;
}

size_t ACL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ACL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }
  // repeated .MumbleProto.ACL.ChanGroup groups = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  // repeated .MumbleProto.ACL.ChanACL acls = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->acls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acls(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bool query = 5 [default = false];
    if (has_query()) {
      total_size += 1 + 1;
    }

    // optional bool inherit_acls = 2 [default = true];
    if (has_inherit_acls()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ACL)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ACL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ACL)
    MergeFrom(*source);
  }
}

void ACL::MergeFrom(const ACL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ACL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  acls_.MergeFrom(from.acls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      query_ = from.query_;
    }
    if (cached_has_bits & 0x00000004u) {
      inherit_acls_ = from.inherit_acls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL::CopyFrom(const ACL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  return true;
}

void ACL::Swap(ACL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL::InternalSwap(ACL* other) {
  using std::swap;
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  CastToBase(&acls_)->InternalSwap(CastToBase(&other->acls_));
  swap(channel_id_, other->channel_id_);
  swap(query_, other->query_);
  swap(inherit_acls_, other->inherit_acls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryUsers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUsers::kIdsFieldNumber;
const int QueryUsers::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUsers::QueryUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_QueryUsers.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.QueryUsers)
}
QueryUsers::QueryUsers(const QueryUsers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ids_(from.ids_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.QueryUsers)
}

void QueryUsers::SharedCtor() {
}

QueryUsers::~QueryUsers() {
  // @@protoc_insertion_point(destructor:MumbleProto.QueryUsers)
  SharedDtor();
}

void QueryUsers::SharedDtor() {
}

void QueryUsers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueryUsers::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryUsers& QueryUsers::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_QueryUsers.base);
  return *internal_default_instance();
}


void QueryUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.QueryUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.QueryUsers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            static_cast<int>(this->names(this->names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.QueryUsers.names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.QueryUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.QueryUsers)
  return false;
#undef DO_
}

void QueryUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.QueryUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ids(i), output);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.QueryUsers.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.QueryUsers)
}

::google::protobuf::uint8* QueryUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.QueryUsers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->ids_, target);

  // repeated string names = 2;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.QueryUsers.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.QueryUsers)
  return target;
}

size_t QueryUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.QueryUsers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ids_size());
    total_size += data_size;
  }

  // repeated string names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.QueryUsers)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryUsers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.QueryUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.QueryUsers)
    MergeFrom(*source);
  }
}

void QueryUsers::MergeFrom(const QueryUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.QueryUsers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  names_.MergeFrom(from.names_);
}

void QueryUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.QueryUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUsers::CopyFrom(const QueryUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.QueryUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUsers::IsInitialized() const {
  return true;
}

void QueryUsers::Swap(QueryUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUsers::InternalSwap(QueryUsers* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  names_.InternalSwap(CastToBase(&other->names_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryUsers::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptSetup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptSetup::kKeyFieldNumber;
const int CryptSetup::kClientNonceFieldNumber;
const int CryptSetup::kServerNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptSetup::CryptSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_CryptSetup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.CryptSetup)
}
CryptSetup::CryptSetup(const CryptSetup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  client_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_nonce()) {
    client_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_nonce_);
  }
  server_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_nonce()) {
    server_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_nonce_);
  }
  // @@protoc_insertion_point(copy_constructor:MumbleProto.CryptSetup)
}

void CryptSetup::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CryptSetup::~CryptSetup() {
  // @@protoc_insertion_point(destructor:MumbleProto.CryptSetup)
  SharedDtor();
}

void CryptSetup::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CryptSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CryptSetup::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptSetup& CryptSetup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_CryptSetup.base);
  return *internal_default_instance();
}


void CryptSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.CryptSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_nonce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      server_nonce_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CryptSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.CryptSetup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes client_nonce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes server_nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.CryptSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.CryptSetup)
  return false;
#undef DO_
}

void CryptSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.CryptSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes client_nonce = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_nonce(), output);
  }

  // optional bytes server_nonce = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->server_nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.CryptSetup)
}

::google::protobuf::uint8* CryptSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.CryptSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes client_nonce = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->client_nonce(), target);
  }

  // optional bytes server_nonce = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->server_nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.CryptSetup)
  return target;
}

size_t CryptSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.CryptSetup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes client_nonce = 2;
    if (has_client_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_nonce());
    }

    // optional bytes server_nonce = 3;
    if (has_server_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_nonce());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.CryptSetup)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptSetup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.CryptSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.CryptSetup)
    MergeFrom(*source);
  }
}

void CryptSetup::MergeFrom(const CryptSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.CryptSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_client_nonce();
      client_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_nonce_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_server_nonce();
      server_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_nonce_);
    }
  }
}

void CryptSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.CryptSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptSetup::CopyFrom(const CryptSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.CryptSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptSetup::IsInitialized() const {
  return true;
}

void CryptSetup::Swap(CryptSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptSetup::InternalSwap(CryptSetup* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_nonce_.Swap(&other->client_nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_nonce_.Swap(&other->server_nonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CryptSetup::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContextActionModify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextActionModify::kActionFieldNumber;
const int ContextActionModify::kTextFieldNumber;
const int ContextActionModify::kContextFieldNumber;
const int ContextActionModify::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextActionModify::ContextActionModify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ContextActionModify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ContextActionModify)
}
ContextActionModify::ContextActionModify(const ContextActionModify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&context_, &from.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&context_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ContextActionModify)
}

void ContextActionModify::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&context_)) + sizeof(operation_));
}

ContextActionModify::~ContextActionModify() {
  // @@protoc_insertion_point(destructor:MumbleProto.ContextActionModify)
  SharedDtor();
}

void ContextActionModify::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContextActionModify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContextActionModify::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContextActionModify& ContextActionModify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ContextActionModify.base);
  return *internal_default_instance();
}


void ContextActionModify::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ContextActionModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      action_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&context_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_) -
        reinterpret_cast<char*>(&context_)) + sizeof(operation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContextActionModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ContextActionModify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ContextActionModify.action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ContextActionModify.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_context();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MumbleProto.ContextActionModify.Operation operation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MumbleProto::ContextActionModify_Operation_IsValid(value)) {
            set_operation(static_cast< ::MumbleProto::ContextActionModify_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ContextActionModify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ContextActionModify)
  return false;
#undef DO_
}

void ContextActionModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ContextActionModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->context(), output);
  }

  // optional .MumbleProto.ContextActionModify.Operation operation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->operation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ContextActionModify)
}

::google::protobuf::uint8* ContextActionModify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ContextActionModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->context(), target);
  }

  // optional .MumbleProto.ContextActionModify.Operation operation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->operation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ContextActionModify)
  return target;
}

size_t ContextActionModify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ContextActionModify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 context = 3;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

    // optional .MumbleProto.ContextActionModify.Operation operation = 4;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContextActionModify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ContextActionModify)
  GOOGLE_DCHECK_NE(&from, this);
  const ContextActionModify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextActionModify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ContextActionModify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ContextActionModify)
    MergeFrom(*source);
  }
}

void ContextActionModify::MergeFrom(const ContextActionModify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ContextActionModify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContextActionModify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ContextActionModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextActionModify::CopyFrom(const ContextActionModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ContextActionModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextActionModify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ContextActionModify::Swap(ContextActionModify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextActionModify::InternalSwap(ContextActionModify* other) {
  using std::swap;
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(operation_, other->operation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContextActionModify::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContextAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextAction::kSessionFieldNumber;
const int ContextAction::kChannelIdFieldNumber;
const int ContextAction::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextAction::ContextAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ContextAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ContextAction)
}
ContextAction::ContextAction(const ContextAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&session_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ContextAction)
}

void ContextAction::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&session_)) + sizeof(channel_id_));
}

ContextAction::~ContextAction() {
  // @@protoc_insertion_point(destructor:MumbleProto.ContextAction)
  SharedDtor();
}

void ContextAction::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContextAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContextAction::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContextAction& ContextAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ContextAction.base);
  return *internal_default_instance();
}


void ContextAction::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ContextAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_id_) -
        reinterpret_cast<char*>(&session_)) + sizeof(channel_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContextAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ContextAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ContextAction.action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ContextAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ContextAction)
  return false;
#undef DO_
}

void ContextAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ContextAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 channel_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // required string action = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextAction.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ContextAction)
}

::google::protobuf::uint8* ContextAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ContextAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 channel_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // required string action = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextAction.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ContextAction)
  return target;
}

size_t ContextAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ContextAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string action = 3;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContextAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ContextAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ContextAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ContextAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ContextAction)
    MergeFrom(*source);
  }
}

void ContextAction::MergeFrom(const ContextAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ContextAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContextAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ContextAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextAction::CopyFrom(const ContextAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ContextAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ContextAction::Swap(ContextAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextAction::InternalSwap(ContextAction* other) {
  using std::swap;
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
  swap(channel_id_, other->channel_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContextAction::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserList_User::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList_User::kUserIdFieldNumber;
const int UserList_User::kNameFieldNumber;
const int UserList_User::kLastSeenFieldNumber;
const int UserList_User::kLastChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList_User::UserList_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserList_User.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserList.User)
}
UserList_User::UserList_User(const UserList_User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  last_seen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_seen()) {
    last_seen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_seen_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_channel_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(last_channel_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserList.User)
}

void UserList_User::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_seen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_channel_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(last_channel_));
}

UserList_User::~UserList_User() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserList.User)
  SharedDtor();
}

void UserList_User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_seen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserList_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserList_User::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserList_User& UserList_User::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserList_User.base);
  return *internal_default_instance();
}


void UserList_User::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserList.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      last_seen_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_channel_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(last_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserList_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserList.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserList.User.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_seen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_seen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_seen().data(), static_cast<int>(this->last_seen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserList.User.last_seen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserList.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserList.User)
  return false;
#undef DO_
}

void UserList_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserList.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string last_seen = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_seen().data(), static_cast<int>(this->last_seen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.last_seen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_seen(), output);
  }

  // optional uint32 last_channel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserList.User)
}

::google::protobuf::uint8* UserList_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserList.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string last_seen = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_seen().data(), static_cast<int>(this->last_seen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.last_seen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_seen(), target);
  }

  // optional uint32 last_channel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserList.User)
  return target;
}

size_t UserList_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserList.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string last_seen = 3;
    if (has_last_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_seen());
    }

  }
  // optional uint32 last_channel = 4;
  if (has_last_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserList_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserList.User)
  GOOGLE_DCHECK_NE(&from, this);
  const UserList_User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserList_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserList.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserList.User)
    MergeFrom(*source);
  }
}

void UserList_User::MergeFrom(const UserList_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserList.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_last_seen();
      last_seen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_seen_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_channel_ = from.last_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserList_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserList.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList_User::CopyFrom(const UserList_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserList.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void UserList_User::Swap(UserList_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList_User::InternalSwap(UserList_User* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_seen_.Swap(&other->last_seen_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(last_channel_, other->last_channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserList_User::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList::UserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserList)
}
UserList::UserList(const UserList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserList)
}

void UserList::SharedCtor() {
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
}

void UserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserList& UserList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserList.base);
  return *internal_default_instance();
}


void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MumbleProto.UserList.User users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserList)
  return false;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MumbleProto.UserList.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserList)
}

::google::protobuf::uint8* UserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MumbleProto.UserList.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MumbleProto.UserList.User users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserList)
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void UserList::Swap(UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList::InternalSwap(UserList* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VoiceTarget_Target::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceTarget_Target::kSessionFieldNumber;
const int VoiceTarget_Target::kChannelIdFieldNumber;
const int VoiceTarget_Target::kGroupFieldNumber;
const int VoiceTarget_Target::kLinksFieldNumber;
const int VoiceTarget_Target::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceTarget_Target::VoiceTarget_Target()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_VoiceTarget_Target.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.VoiceTarget.Target)
}
VoiceTarget_Target::VoiceTarget_Target(const VoiceTarget_Target& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      session_(from.session_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group()) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&children_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(children_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.VoiceTarget.Target)
}

void VoiceTarget_Target::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&children_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(children_));
}

VoiceTarget_Target::~VoiceTarget_Target() {
  // @@protoc_insertion_point(destructor:MumbleProto.VoiceTarget.Target)
  SharedDtor();
}

void VoiceTarget_Target::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoiceTarget_Target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VoiceTarget_Target::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceTarget_Target& VoiceTarget_Target::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_VoiceTarget_Target.base);
  return *internal_default_instance();
}


void VoiceTarget_Target::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.VoiceTarget.Target)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    group_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&children_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(children_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceTarget_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.VoiceTarget.Target)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_session())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.VoiceTarget.Target.group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool links = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_links();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &links_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool children = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_children();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.VoiceTarget.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.VoiceTarget.Target)
  return false;
#undef DO_
}

void VoiceTarget_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.VoiceTarget.Target)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 session = 1;
  for (int i = 0, n = this->session_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->session(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional string group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.VoiceTarget.Target.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group(), output);
  }

  // optional bool links = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->links(), output);
  }

  // optional bool children = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->children(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.VoiceTarget.Target)
}

::google::protobuf::uint8* VoiceTarget_Target::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.VoiceTarget.Target)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 session = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->session_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional string group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.VoiceTarget.Target.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group(), target);
  }

  // optional bool links = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->links(), target);
  }

  // optional bool children = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->children(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.VoiceTarget.Target)
  return target;
}

size_t VoiceTarget_Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.VoiceTarget.Target)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 session = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->session_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->session_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional bool links = 4 [default = false];
    if (has_links()) {
      total_size += 1 + 1;
    }

    // optional bool children = 5 [default = false];
    if (has_children()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceTarget_Target::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.VoiceTarget.Target)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceTarget_Target* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceTarget_Target>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.VoiceTarget.Target)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.VoiceTarget.Target)
    MergeFrom(*source);
  }
}

void VoiceTarget_Target::MergeFrom(const VoiceTarget_Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.VoiceTarget.Target)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_.MergeFrom(from.session_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group();
      group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      links_ = from.links_;
    }
    if (cached_has_bits & 0x00000008u) {
      children_ = from.children_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceTarget_Target::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.VoiceTarget.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceTarget_Target::CopyFrom(const VoiceTarget_Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.VoiceTarget.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceTarget_Target::IsInitialized() const {
  return true;
}

void VoiceTarget_Target::Swap(VoiceTarget_Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceTarget_Target::InternalSwap(VoiceTarget_Target* other) {
  using std::swap;
  session_.InternalSwap(&other->session_);
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_id_, other->channel_id_);
  swap(links_, other->links_);
  swap(children_, other->children_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VoiceTarget_Target::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VoiceTarget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceTarget::kIdFieldNumber;
const int VoiceTarget::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceTarget::VoiceTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_VoiceTarget.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.VoiceTarget)
}
VoiceTarget::VoiceTarget(const VoiceTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MumbleProto.VoiceTarget)
}

void VoiceTarget::SharedCtor() {
  id_ = 0u;
}

VoiceTarget::~VoiceTarget() {
  // @@protoc_insertion_point(destructor:MumbleProto.VoiceTarget)
  SharedDtor();
}

void VoiceTarget::SharedDtor() {
}

void VoiceTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VoiceTarget::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceTarget& VoiceTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_VoiceTarget.base);
  return *internal_default_instance();
}


void VoiceTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.VoiceTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.VoiceTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MumbleProto.VoiceTarget.Target targets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.VoiceTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.VoiceTarget)
  return false;
#undef DO_
}

void VoiceTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.VoiceTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .MumbleProto.VoiceTarget.Target targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->targets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.VoiceTarget)
}

::google::protobuf::uint8* VoiceTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.VoiceTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .MumbleProto.VoiceTarget.Target targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->targets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.VoiceTarget)
  return target;
}

size_t VoiceTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.VoiceTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MumbleProto.VoiceTarget.Target targets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->targets(static_cast<int>(i)));
    }
  }

  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.VoiceTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceTarget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.VoiceTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.VoiceTarget)
    MergeFrom(*source);
  }
}

void VoiceTarget::MergeFrom(const VoiceTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.VoiceTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void VoiceTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.VoiceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceTarget::CopyFrom(const VoiceTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.VoiceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceTarget::IsInitialized() const {
  return true;
}

void VoiceTarget::Swap(VoiceTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceTarget::InternalSwap(VoiceTarget* other) {
  using std::swap;
  CastToBase(&targets_)->InternalSwap(CastToBase(&other->targets_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VoiceTarget::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PermissionQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermissionQuery::kChannelIdFieldNumber;
const int PermissionQuery::kPermissionsFieldNumber;
const int PermissionQuery::kFlushFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermissionQuery::PermissionQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_PermissionQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.PermissionQuery)
}
PermissionQuery::PermissionQuery(const PermissionQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flush_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(flush_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.PermissionQuery)
}

void PermissionQuery::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flush_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(flush_));
}

PermissionQuery::~PermissionQuery() {
  // @@protoc_insertion_point(destructor:MumbleProto.PermissionQuery)
  SharedDtor();
}

void PermissionQuery::SharedDtor() {
}

void PermissionQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PermissionQuery::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PermissionQuery& PermissionQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_PermissionQuery.base);
  return *internal_default_instance();
}


void PermissionQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.PermissionQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flush_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(flush_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PermissionQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.PermissionQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 permissions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_permissions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flush = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flush();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flush_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.PermissionQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.PermissionQuery)
  return false;
#undef DO_
}

void PermissionQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.PermissionQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional uint32 permissions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permissions(), output);
  }

  // optional bool flush = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flush(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.PermissionQuery)
}

::google::protobuf::uint8* PermissionQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PermissionQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional uint32 permissions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permissions(), target);
  }

  // optional bool flush = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flush(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PermissionQuery)
  return target;
}

size_t PermissionQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.PermissionQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 permissions = 2;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permissions());
    }

    // optional bool flush = 3 [default = false];
    if (has_flush()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PermissionQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.PermissionQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const PermissionQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PermissionQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.PermissionQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.PermissionQuery)
    MergeFrom(*source);
  }
}

void PermissionQuery::MergeFrom(const PermissionQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.PermissionQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      permissions_ = from.permissions_;
    }
    if (cached_has_bits & 0x00000004u) {
      flush_ = from.flush_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PermissionQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.PermissionQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermissionQuery::CopyFrom(const PermissionQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.PermissionQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionQuery::IsInitialized() const {
  return true;
}

void PermissionQuery::Swap(PermissionQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermissionQuery::InternalSwap(PermissionQuery* other) {
  using std::swap;
  swap(channel_id_, other->channel_id_);
  swap(permissions_, other->permissions_);
  swap(flush_, other->flush_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PermissionQuery::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CodecVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodecVersion::kAlphaFieldNumber;
const int CodecVersion::kBetaFieldNumber;
const int CodecVersion::kPreferAlphaFieldNumber;
const int CodecVersion::kOpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodecVersion::CodecVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_CodecVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.CodecVersion)
}
CodecVersion::CodecVersion(const CodecVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefer_alpha_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(prefer_alpha_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.CodecVersion)
}

void CodecVersion::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opus_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(opus_));
  prefer_alpha_ = true;
}

CodecVersion::~CodecVersion() {
  // @@protoc_insertion_point(destructor:MumbleProto.CodecVersion)
  SharedDtor();
}

void CodecVersion::SharedDtor() {
}

void CodecVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CodecVersion::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CodecVersion& CodecVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_CodecVersion.base);
  return *internal_default_instance();
}


void CodecVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.CodecVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&alpha_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opus_) -
        reinterpret_cast<char*>(&alpha_)) + sizeof(opus_));
    prefer_alpha_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CodecVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.CodecVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool prefer_alpha = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_prefer_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool opus = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_opus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.CodecVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.CodecVersion)
  return false;
#undef DO_
}

void CodecVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.CodecVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alpha(), output);
  }

  // required int32 beta = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beta(), output);
  }

  // required bool prefer_alpha = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prefer_alpha(), output);
  }

  // optional bool opus = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->opus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.CodecVersion)
}

::google::protobuf::uint8* CodecVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.CodecVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alpha(), target);
  }

  // required int32 beta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beta(), target);
  }

  // required bool prefer_alpha = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prefer_alpha(), target);
  }

  // optional bool opus = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->opus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.CodecVersion)
  return target;
}

size_t CodecVersion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MumbleProto.CodecVersion)
  size_t total_size = 0;

  if (has_alpha()) {
    // required int32 alpha = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alpha());
  }

  if (has_beta()) {
    // required int32 beta = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beta());
  }

  if (has_prefer_alpha()) {
    // required bool prefer_alpha = 3 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CodecVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.CodecVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 alpha = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alpha());

    // required int32 beta = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beta());

    // required bool prefer_alpha = 3 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool opus = 4 [default = false];
  if (has_opus()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodecVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.CodecVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CodecVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CodecVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.CodecVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.CodecVersion)
    MergeFrom(*source);
  }
}

void CodecVersion::MergeFrom(const CodecVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.CodecVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000002u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000004u) {
      opus_ = from.opus_;
    }
    if (cached_has_bits & 0x00000008u) {
      prefer_alpha_ = from.prefer_alpha_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CodecVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.CodecVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodecVersion::CopyFrom(const CodecVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.CodecVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodecVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void CodecVersion::Swap(CodecVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodecVersion::InternalSwap(CodecVersion* other) {
  using std::swap;
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
  swap(opus_, other->opus_);
  swap(prefer_alpha_, other->prefer_alpha_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CodecVersion::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserStats_Stats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStats_Stats::kGoodFieldNumber;
const int UserStats_Stats::kLateFieldNumber;
const int UserStats_Stats::kLostFieldNumber;
const int UserStats_Stats::kResyncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStats_Stats::UserStats_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserStats_Stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserStats.Stats)
}
UserStats_Stats::UserStats_Stats(const UserStats_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&good_, &from.good_,
    static_cast<size_t>(reinterpret_cast<char*>(&resync_) -
    reinterpret_cast<char*>(&good_)) + sizeof(resync_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserStats.Stats)
}

void UserStats_Stats::SharedCtor() {
  ::memset(&good_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resync_) -
      reinterpret_cast<char*>(&good_)) + sizeof(resync_));
}

UserStats_Stats::~UserStats_Stats() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserStats.Stats)
  SharedDtor();
}

void UserStats_Stats::SharedDtor() {
}

void UserStats_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserStats_Stats::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserStats_Stats& UserStats_Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserStats_Stats.base);
  return *internal_default_instance();
}


void UserStats_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserStats.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&good_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resync_) -
        reinterpret_cast<char*>(&good_)) + sizeof(resync_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserStats_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserStats.Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 good = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_good();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 late = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_late();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &late_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resync = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_resync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserStats.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserStats.Stats)
  return false;
#undef DO_
}

void UserStats_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserStats.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 good = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->good(), output);
  }

  // optional uint32 late = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->late(), output);
  }

  // optional uint32 lost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lost(), output);
  }

  // optional uint32 resync = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resync(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserStats.Stats)
}

::google::protobuf::uint8* UserStats_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserStats.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 good = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->good(), target);
  }

  // optional uint32 late = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->late(), target);
  }

  // optional uint32 lost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lost(), target);
  }

  // optional uint32 resync = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resync(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserStats.Stats)
  return target;
}

size_t UserStats_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserStats.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 good = 1;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good());
    }

    // optional uint32 late = 2;
    if (has_late()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->late());
    }

    // optional uint32 lost = 3;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost());
    }

    // optional uint32 resync = 4;
    if (has_resync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resync());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStats_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserStats.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStats_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStats_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserStats.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserStats.Stats)
    MergeFrom(*source);
  }
}

void UserStats_Stats::MergeFrom(const UserStats_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserStats.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      good_ = from.good_;
    }
    if (cached_has_bits & 0x00000002u) {
      late_ = from.late_;
    }
    if (cached_has_bits & 0x00000004u) {
      lost_ = from.lost_;
    }
    if (cached_has_bits & 0x00000008u) {
      resync_ = from.resync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStats_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserStats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStats_Stats::CopyFrom(const UserStats_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserStats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStats_Stats::IsInitialized() const {
  return true;
}

void UserStats_Stats::Swap(UserStats_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStats_Stats::InternalSwap(UserStats_Stats* other) {
  using std::swap;
  swap(good_, other->good_);
  swap(late_, other->late_);
  swap(lost_, other->lost_);
  swap(resync_, other->resync_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserStats_Stats::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserStats::InitAsDefaultInstance() {
  ::MumbleProto::_UserStats_default_instance_._instance.get_mutable()->from_client_ = const_cast< ::MumbleProto::UserStats_Stats*>(
      ::MumbleProto::UserStats_Stats::internal_default_instance());
  ::MumbleProto::_UserStats_default_instance_._instance.get_mutable()->from_server_ = const_cast< ::MumbleProto::UserStats_Stats*>(
      ::MumbleProto::UserStats_Stats::internal_default_instance());
  ::MumbleProto::_UserStats_default_instance_._instance.get_mutable()->version_ = const_cast< ::MumbleProto::Version*>(
      ::MumbleProto::Version::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStats::kSessionFieldNumber;
const int UserStats::kStatsOnlyFieldNumber;
const int UserStats::kCertificatesFieldNumber;
const int UserStats::kFromClientFieldNumber;
const int UserStats::kFromServerFieldNumber;
const int UserStats::kUdpPacketsFieldNumber;
const int UserStats::kTcpPacketsFieldNumber;
const int UserStats::kUdpPingAvgFieldNumber;
const int UserStats::kUdpPingVarFieldNumber;
const int UserStats::kTcpPingAvgFieldNumber;
const int UserStats::kTcpPingVarFieldNumber;
const int UserStats::kVersionFieldNumber;
const int UserStats::kCeltVersionsFieldNumber;
const int UserStats::kAddressFieldNumber;
const int UserStats::kBandwidthFieldNumber;
const int UserStats::kOnlinesecsFieldNumber;
const int UserStats::kIdlesecsFieldNumber;
const int UserStats::kStrongCertificateFieldNumber;
const int UserStats::kOpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStats::UserStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_UserStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserStats)
}
UserStats::UserStats(const UserStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      certificates_(from.certificates_),
      celt_versions_(from.celt_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_from_client()) {
    from_client_ = new ::MumbleProto::UserStats_Stats(*from.from_client_);
  } else {
    from_client_ = NULL;
  }
  if (from.has_from_server()) {
    from_server_ = new ::MumbleProto::UserStats_Stats(*from.from_server_);
  } else {
    from_server_ = NULL;
  }
  if (from.has_version()) {
    version_ = new ::MumbleProto::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&idlesecs_) -
    reinterpret_cast<char*>(&session_)) + sizeof(idlesecs_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserStats)
}

void UserStats::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idlesecs_) -
      reinterpret_cast<char*>(&from_client_)) + sizeof(idlesecs_));
}

UserStats::~UserStats() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserStats)
  SharedDtor();
}

void UserStats::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_client_;
  if (this != internal_default_instance()) delete from_server_;
  if (this != internal_default_instance()) delete version_;
}

void UserStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserStats::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserStats& UserStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_UserStats.base);
  return *internal_default_instance();
}


void UserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificates_.Clear();
  celt_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(from_client_ != NULL);
      from_client_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(from_server_ != NULL);
      from_server_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(version_ != NULL);
      version_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&udp_ping_avg_) -
        reinterpret_cast<char*>(&session_)) + sizeof(udp_ping_avg_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&udp_ping_var_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&onlinesecs_) -
        reinterpret_cast<char*>(&udp_ping_var_)) + sizeof(onlinesecs_));
  }
  idlesecs_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stats_only = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stats_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stats_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes certificates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_certificates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MumbleProto.UserStats.Stats from_client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MumbleProto.UserStats.Stats from_server = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 udp_packets = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_udp_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udp_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tcp_packets = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tcp_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float udp_ping_avg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_udp_ping_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float udp_ping_var = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_udp_ping_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tcp_ping_avg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_tcp_ping_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tcp_ping_var = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_tcp_ping_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MumbleProto.Version version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 celt_versions = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104u, input, this->mutable_celt_versions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_celt_versions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bandwidth = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 onlinesecs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_onlinesecs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinesecs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idlesecs = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_idlesecs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idlesecs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool strong_certificate = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_strong_certificate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strong_certificate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool opus = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_opus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserStats)
  return false;
#undef DO_
}

void UserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional bool stats_only = 2 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stats_only(), output);
  }

  // repeated bytes certificates = 3;
  for (int i = 0, n = this->certificates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->certificates(i), output);
  }

  // optional .MumbleProto.UserStats.Stats from_client = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_from_client(), output);
  }

  // optional .MumbleProto.UserStats.Stats from_server = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_from_server(), output);
  }

  // optional uint32 udp_packets = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->udp_packets(), output);
  }

  // optional uint32 tcp_packets = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcp_packets(), output);
  }

  // optional float udp_ping_avg = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->udp_ping_avg(), output);
  }

  // optional float udp_ping_var = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->udp_ping_var(), output);
  }

  // optional float tcp_ping_avg = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tcp_ping_avg(), output);
  }

  // optional float tcp_ping_var = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tcp_ping_var(), output);
  }

  // optional .MumbleProto.Version version = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_version(), output);
  }

  // repeated int32 celt_versions = 13;
  for (int i = 0, n = this->celt_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->celt_versions(i), output);
  }

  // optional bytes address = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->address(), output);
  }

  // optional uint32 bandwidth = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bandwidth(), output);
  }

  // optional uint32 onlinesecs = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->onlinesecs(), output);
  }

  // optional uint32 idlesecs = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->idlesecs(), output);
  }

  // optional bool strong_certificate = 18 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->strong_certificate(), output);
  }

  // optional bool opus = 19 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->opus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserStats)
}

::google::protobuf::uint8* UserStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional bool stats_only = 2 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stats_only(), target);
  }

  // repeated bytes certificates = 3;
  for (int i = 0, n = this->certificates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->certificates(i), target);
  }

  // optional .MumbleProto.UserStats.Stats from_client = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_from_client(), deterministic, target);
  }

  // optional .MumbleProto.UserStats.Stats from_server = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_from_server(), deterministic, target);
  }

  // optional uint32 udp_packets = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->udp_packets(), target);
  }

  // optional uint32 tcp_packets = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcp_packets(), target);
  }

  // optional float udp_ping_avg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->udp_ping_avg(), target);
  }

  // optional float udp_ping_var = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->udp_ping_var(), target);
  }

  // optional float tcp_ping_avg = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tcp_ping_avg(), target);
  }

  // optional float tcp_ping_var = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tcp_ping_var(), target);
  }

  // optional .MumbleProto.Version version = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_version(), deterministic, target);
  }

  // repeated int32 celt_versions = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(13, this->celt_versions_, target);

  // optional bytes address = 14;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->address(), target);
  }

  // optional uint32 bandwidth = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bandwidth(), target);
  }

  // optional uint32 onlinesecs = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->onlinesecs(), target);
  }

  // optional uint32 idlesecs = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->idlesecs(), target);
  }

  // optional bool strong_certificate = 18 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->strong_certificate(), target);
  }

  // optional bool opus = 19 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->opus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserStats)
  return target;
}

size_t UserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes certificates = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->certificates_size());
  for (int i = 0, n = this->certificates_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->certificates(i));
  }

  // repeated int32 celt_versions = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->celt_versions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->celt_versions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes address = 14;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional .MumbleProto.UserStats.Stats from_client = 4;
    if (has_from_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *from_client_);
    }

    // optional .MumbleProto.UserStats.Stats from_server = 5;
    if (has_from_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *from_server_);
    }

    // optional .MumbleProto.Version version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udp_packets());
    }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcp_packets());
    }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float udp_ping_var = 9;
    if (has_udp_ping_var()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var()) {
      total_size += 1 + 4;
    }

    // optional bool stats_only = 2 [default = false];
    if (has_stats_only()) {
      total_size += 1 + 1;
    }

    // optional bool strong_certificate = 18 [default = false];
    if (has_strong_certificate()) {
      total_size += 2 + 1;
    }

    // optional bool opus = 19 [default = false];
    if (has_opus()) {
      total_size += 2 + 1;
    }

    // optional uint32 bandwidth = 15;
    if (has_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bandwidth());
    }

    // optional uint32 onlinesecs = 16;
    if (has_onlinesecs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinesecs());
    }

  }
  // optional uint32 idlesecs = 17;
  if (has_idlesecs()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idlesecs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserStats)
    MergeFrom(*source);
  }
}

void UserStats::MergeFrom(const UserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  certificates_.MergeFrom(from.certificates_);
  celt_versions_.MergeFrom(from.celt_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_from_client()->::MumbleProto::UserStats_Stats::MergeFrom(from.from_client());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_from_server()->::MumbleProto::UserStats_Stats::MergeFrom(from.from_server());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_version()->::MumbleProto::Version::MergeFrom(from.version());
    }
    if (cached_has_bits & 0x00000010u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000020u) {
      udp_packets_ = from.udp_packets_;
    }
    if (cached_has_bits & 0x00000040u) {
      tcp_packets_ = from.tcp_packets_;
    }
    if (cached_has_bits & 0x00000080u) {
      udp_ping_avg_ = from.udp_ping_avg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      udp_ping_var_ = from.udp_ping_var_;
    }
    if (cached_has_bits & 0x00000200u) {
      tcp_ping_avg_ = from.tcp_ping_avg_;
    }
    if (cached_has_bits & 0x00000400u) {
      tcp_ping_var_ = from.tcp_ping_var_;
    }
    if (cached_has_bits & 0x00000800u) {
      stats_only_ = from.stats_only_;
    }
    if (cached_has_bits & 0x00001000u) {
      strong_certificate_ = from.strong_certificate_;
    }
    if (cached_has_bits & 0x00002000u) {
      opus_ = from.opus_;
    }
    if (cached_has_bits & 0x00004000u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00008000u) {
      onlinesecs_ = from.onlinesecs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_idlesecs(from.idlesecs());
  }
}

void UserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStats::CopyFrom(const UserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStats::IsInitialized() const {
  return true;
}

void UserStats::Swap(UserStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStats::InternalSwap(UserStats* other) {
  using std::swap;
  certificates_.InternalSwap(CastToBase(&other->certificates_));
  celt_versions_.InternalSwap(&other->celt_versions_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_client_, other->from_client_);
  swap(from_server_, other->from_server_);
  swap(version_, other->version_);
  swap(session_, other->session_);
  swap(udp_packets_, other->udp_packets_);
  swap(tcp_packets_, other->tcp_packets_);
  swap(udp_ping_avg_, other->udp_ping_avg_);
  swap(udp_ping_var_, other->udp_ping_var_);
  swap(tcp_ping_avg_, other->tcp_ping_avg_);
  swap(tcp_ping_var_, other->tcp_ping_var_);
  swap(stats_only_, other->stats_only_);
  swap(strong_certificate_, other->strong_certificate_);
  swap(opus_, other->opus_);
  swap(bandwidth_, other->bandwidth_);
  swap(onlinesecs_, other->onlinesecs_);
  swap(idlesecs_, other->idlesecs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserStats::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestBlob::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBlob::kSessionTextureFieldNumber;
const int RequestBlob::kSessionCommentFieldNumber;
const int RequestBlob::kChannelDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBlob::RequestBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_RequestBlob.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.RequestBlob)
}
RequestBlob::RequestBlob(const RequestBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      session_texture_(from.session_texture_),
      session_comment_(from.session_comment_),
      channel_description_(from.channel_description_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.RequestBlob)
}

void RequestBlob::SharedCtor() {
}

RequestBlob::~RequestBlob() {
  // @@protoc_insertion_point(destructor:MumbleProto.RequestBlob)
  SharedDtor();
}

void RequestBlob::SharedDtor() {
}

void RequestBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestBlob::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestBlob& RequestBlob::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_RequestBlob.base);
  return *internal_default_instance();
}


void RequestBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.RequestBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_texture_.Clear();
  session_comment_.Clear();
  channel_description_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.RequestBlob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 session_texture = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_session_texture())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session_texture())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 session_comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_session_comment())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session_comment())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channel_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_channel_description())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_description())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.RequestBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.RequestBlob)
  return false;
#undef DO_
}

void RequestBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.RequestBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 session_texture = 1;
  for (int i = 0, n = this->session_texture_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->session_texture(i), output);
  }

  // repeated uint32 session_comment = 2;
  for (int i = 0, n = this->session_comment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->session_comment(i), output);
  }

  // repeated uint32 channel_description = 3;
  for (int i = 0, n = this->channel_description_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channel_description(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.RequestBlob)
}

::google::protobuf::uint8* RequestBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.RequestBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 session_texture = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->session_texture_, target);

  // repeated uint32 session_comment = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->session_comment_, target);

  // repeated uint32 channel_description = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->channel_description_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.RequestBlob)
  return target;
}

size_t RequestBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.RequestBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 session_texture = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->session_texture_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->session_texture_size());
    total_size += data_size;
  }

  // repeated uint32 session_comment = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->session_comment_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->session_comment_size());
    total_size += data_size;
  }

  // repeated uint32 channel_description = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channel_description_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channel_description_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.RequestBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBlob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.RequestBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.RequestBlob)
    MergeFrom(*source);
  }
}

void RequestBlob::MergeFrom(const RequestBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.RequestBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_texture_.MergeFrom(from.session_texture_);
  session_comment_.MergeFrom(from.session_comment_);
  channel_description_.MergeFrom(from.channel_description_);
}

void RequestBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.RequestBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBlob::CopyFrom(const RequestBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.RequestBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBlob::IsInitialized() const {
  return true;
}

void RequestBlob::Swap(RequestBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBlob::InternalSwap(RequestBlob* other) {
  using std::swap;
  session_texture_.InternalSwap(&other->session_texture_);
  session_comment_.InternalSwap(&other->session_comment_);
  channel_description_.InternalSwap(&other->channel_description_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestBlob::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kMaxBandwidthFieldNumber;
const int ServerConfig::kWelcomeTextFieldNumber;
const int ServerConfig::kAllowHtmlFieldNumber;
const int ServerConfig::kMessageLengthFieldNumber;
const int ServerConfig::kImageMessageLengthFieldNumber;
const int ServerConfig::kMaxUsersFieldNumber;
const int ServerConfig::kRecordingAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_ServerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ServerConfig)
}
ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  welcome_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_welcome_text()) {
    welcome_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_text_);
  }
  ::memcpy(&max_bandwidth_, &from.max_bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_users_) -
    reinterpret_cast<char*>(&max_bandwidth_)) + sizeof(max_users_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ServerConfig)
}

void ServerConfig::SharedCtor() {
  welcome_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_users_) -
      reinterpret_cast<char*>(&max_bandwidth_)) + sizeof(max_users_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:MumbleProto.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  welcome_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerConfig& ServerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_ServerConfig.base);
  return *internal_default_instance();
}


void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    welcome_text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&max_bandwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_users_) -
        reinterpret_cast<char*>(&max_bandwidth_)) + sizeof(max_users_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ServerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_bandwidth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string welcome_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_text().data(), static_cast<int>(this->welcome_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ServerConfig.welcome_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_html = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_allow_html();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_html_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_message_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_message_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_image_message_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_message_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_users = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool recording_allowed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_recording_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recording_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_bandwidth = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_bandwidth(), output);
  }

  // optional string welcome_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), static_cast<int>(this->welcome_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerConfig.welcome_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->welcome_text(), output);
  }

  // optional bool allow_html = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_html(), output);
  }

  // optional uint32 message_length = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_length(), output);
  }

  // optional uint32 image_message_length = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->image_message_length(), output);
  }

  // optional uint32 max_users = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_users(), output);
  }

  // optional bool recording_allowed = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->recording_allowed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_bandwidth = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_bandwidth(), target);
  }

  // optional string welcome_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), static_cast<int>(this->welcome_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerConfig.welcome_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->welcome_text(), target);
  }

  // optional bool allow_html = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allow_html(), target);
  }

  // optional uint32 message_length = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_length(), target);
  }

  // optional uint32 image_message_length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->image_message_length(), target);
  }

  // optional uint32 max_users = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_users(), target);
  }

  // optional bool recording_allowed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->recording_allowed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ServerConfig)
  return target;
}

size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ServerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string welcome_text = 2;
    if (has_welcome_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_text());
    }

    // optional uint32 max_bandwidth = 1;
    if (has_max_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bandwidth());
    }

    // optional uint32 message_length = 4;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

    // optional uint32 image_message_length = 5;
    if (has_image_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_message_length());
    }

    // optional bool allow_html = 3;
    if (has_allow_html()) {
      total_size += 1 + 1;
    }

    // optional bool recording_allowed = 7;
    if (has_recording_allowed()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_users = 6;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_welcome_text();
      welcome_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      max_bandwidth_ = from.max_bandwidth_;
    }
    if (cached_has_bits & 0x00000004u) {
      message_length_ = from.message_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      image_message_length_ = from.image_message_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_html_ = from.allow_html_;
    }
    if (cached_has_bits & 0x00000020u) {
      recording_allowed_ = from.recording_allowed_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_users_ = from.max_users_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  using std::swap;
  welcome_text_.Swap(&other->welcome_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_bandwidth_, other->max_bandwidth_);
  swap(message_length_, other->message_length_);
  swap(image_message_length_, other->image_message_length_);
  swap(allow_html_, other->allow_html_);
  swap(recording_allowed_, other->recording_allowed_);
  swap(max_users_, other->max_users_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SuggestConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggestConfig::kVersionV1FieldNumber;
const int SuggestConfig::kVersionV2FieldNumber;
const int SuggestConfig::kPositionalFieldNumber;
const int SuggestConfig::kPushToTalkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggestConfig::SuggestConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_SuggestConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.SuggestConfig)
}
SuggestConfig::SuggestConfig(const SuggestConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_v1_, &from.version_v1_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_v2_) -
    reinterpret_cast<char*>(&version_v1_)) + sizeof(version_v2_));
  // @@protoc_insertion_point(copy_constructor:MumbleProto.SuggestConfig)
}

void SuggestConfig::SharedCtor() {
  ::memset(&version_v1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_v2_) -
      reinterpret_cast<char*>(&version_v1_)) + sizeof(version_v2_));
}

SuggestConfig::~SuggestConfig() {
  // @@protoc_insertion_point(destructor:MumbleProto.SuggestConfig)
  SharedDtor();
}

void SuggestConfig::SharedDtor() {
}

void SuggestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SuggestConfig::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggestConfig& SuggestConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_SuggestConfig.base);
  return *internal_default_instance();
}


void SuggestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.SuggestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&version_v1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_v2_) -
        reinterpret_cast<char*>(&version_v1_)) + sizeof(version_v2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.SuggestConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_v1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_v1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool positional = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_positional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool push_to_talk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_push_to_talk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_to_talk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version_v2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_version_v2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_v2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.SuggestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.SuggestConfig)
  return false;
#undef DO_
}

void SuggestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.SuggestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_v1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version_v1(), output);
  }

  // optional bool positional = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->positional(), output);
  }

  // optional bool push_to_talk = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->push_to_talk(), output);
  }

  // optional uint64 version_v2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->version_v2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.SuggestConfig)
}

::google::protobuf::uint8* SuggestConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.SuggestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_v1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version_v1(), target);
  }

  // optional bool positional = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->positional(), target);
  }

  // optional bool push_to_talk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->push_to_talk(), target);
  }

  // optional uint64 version_v2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->version_v2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.SuggestConfig)
  return target;
}

size_t SuggestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.SuggestConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 version_v1 = 1;
    if (has_version_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_v1());
    }

    // optional bool positional = 2;
    if (has_positional()) {
      total_size += 1 + 1;
    }

    // optional bool push_to_talk = 3;
    if (has_push_to_talk()) {
      total_size += 1 + 1;
    }

    // optional uint64 version_v2 = 4;
    if (has_version_v2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version_v2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuggestConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.SuggestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggestConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggestConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.SuggestConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.SuggestConfig)
    MergeFrom(*source);
  }
}

void SuggestConfig::MergeFrom(const SuggestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.SuggestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      version_v1_ = from.version_v1_;
    }
    if (cached_has_bits & 0x00000002u) {
      positional_ = from.positional_;
    }
    if (cached_has_bits & 0x00000004u) {
      push_to_talk_ = from.push_to_talk_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_v2_ = from.version_v2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggestConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.SuggestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggestConfig::CopyFrom(const SuggestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.SuggestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestConfig::IsInitialized() const {
  return true;
}

void SuggestConfig::Swap(SuggestConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggestConfig::InternalSwap(SuggestConfig* other) {
  using std::swap;
  swap(version_v1_, other->version_v1_);
  swap(positional_, other->positional_);
  swap(push_to_talk_, other->push_to_talk_);
  swap(version_v2_, other->version_v2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SuggestConfig::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PluginDataTransmission::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PluginDataTransmission::kSenderSessionFieldNumber;
const int PluginDataTransmission::kReceiverSessionsFieldNumber;
const int PluginDataTransmission::kDataFieldNumber;
const int PluginDataTransmission::kDataIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PluginDataTransmission::PluginDataTransmission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Mumble_2eproto::scc_info_PluginDataTransmission.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.PluginDataTransmission)
}
PluginDataTransmission::PluginDataTransmission(const PluginDataTransmission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      receiversessions_(from.receiversessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataid()) {
    dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
  }
  sendersession_ = from.sendersession_;
  // @@protoc_insertion_point(copy_constructor:MumbleProto.PluginDataTransmission)
}

void PluginDataTransmission::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendersession_ = 0u;
}

PluginDataTransmission::~PluginDataTransmission() {
  // @@protoc_insertion_point(destructor:MumbleProto.PluginDataTransmission)
  SharedDtor();
}

void PluginDataTransmission::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PluginDataTransmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PluginDataTransmission::descriptor() {
  ::protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PluginDataTransmission& PluginDataTransmission::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Mumble_2eproto::scc_info_PluginDataTransmission.base);
  return *internal_default_instance();
}


void PluginDataTransmission::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.PluginDataTransmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiversessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dataid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  sendersession_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PluginDataTransmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.PluginDataTransmission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 senderSession = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sendersession();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendersession_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 receiverSessions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receiversessions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_receiversessions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dataID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataid().data(), static_cast<int>(this->dataid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.PluginDataTransmission.dataID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.PluginDataTransmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.PluginDataTransmission)
  return false;
#undef DO_
}

void PluginDataTransmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.PluginDataTransmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 senderSession = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sendersession(), output);
  }

  // repeated uint32 receiverSessions = 2 [packed = true];
  if (this->receiversessions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _receiversessions_cached_byte_size_));
  }
  for (int i = 0, n = this->receiversessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->receiversessions(i), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional string dataID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), static_cast<int>(this->dataid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PluginDataTransmission.dataID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dataid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.PluginDataTransmission)
}

::google::protobuf::uint8* PluginDataTransmission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PluginDataTransmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 senderSession = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sendersession(), target);
  }

  // repeated uint32 receiverSessions = 2 [packed = true];
  if (this->receiversessions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _receiversessions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->receiversessions_, target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional string dataID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), static_cast<int>(this->dataid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PluginDataTransmission.dataID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dataid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PluginDataTransmission)
  return target;
}

size_t PluginDataTransmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.PluginDataTransmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 receiverSessions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->receiversessions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _receiversessions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string dataID = 4;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataid());
    }

    // optional uint32 senderSession = 1;
    if (has_sendersession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendersession());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginDataTransmission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.PluginDataTransmission)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginDataTransmission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PluginDataTransmission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.PluginDataTransmission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.PluginDataTransmission)
    MergeFrom(*source);
  }
}

void PluginDataTransmission::MergeFrom(const PluginDataTransmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.PluginDataTransmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiversessions_.MergeFrom(from.receiversessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dataid();
      dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
    }
    if (cached_has_bits & 0x00000004u) {
      sendersession_ = from.sendersession_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginDataTransmission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.PluginDataTransmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginDataTransmission::CopyFrom(const PluginDataTransmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.PluginDataTransmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginDataTransmission::IsInitialized() const {
  return true;
}

void PluginDataTransmission::Swap(PluginDataTransmission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PluginDataTransmission::InternalSwap(PluginDataTransmission* other) {
  using std::swap;
  receiversessions_.InternalSwap(&other->receiversessions_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dataid_.Swap(&other->dataid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sendersession_, other->sendersession_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PluginDataTransmission::GetMetadata() const {
  protobuf_Mumble_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Mumble_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MumbleProto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::Version* Arena::CreateMaybeMessage< ::MumbleProto::Version >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::Version >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UDPTunnel* Arena::CreateMaybeMessage< ::MumbleProto::UDPTunnel >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UDPTunnel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::Authenticate* Arena::CreateMaybeMessage< ::MumbleProto::Authenticate >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::Authenticate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::Ping* Arena::CreateMaybeMessage< ::MumbleProto::Ping >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::Ping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::Reject* Arena::CreateMaybeMessage< ::MumbleProto::Reject >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::Reject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ServerSync* Arena::CreateMaybeMessage< ::MumbleProto::ServerSync >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ServerSync >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ChannelRemove* Arena::CreateMaybeMessage< ::MumbleProto::ChannelRemove >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ChannelRemove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ChannelState* Arena::CreateMaybeMessage< ::MumbleProto::ChannelState >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ChannelState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserRemove* Arena::CreateMaybeMessage< ::MumbleProto::UserRemove >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserRemove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserState_VolumeAdjustment* Arena::CreateMaybeMessage< ::MumbleProto::UserState_VolumeAdjustment >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserState_VolumeAdjustment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserState* Arena::CreateMaybeMessage< ::MumbleProto::UserState >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::BanList_BanEntry* Arena::CreateMaybeMessage< ::MumbleProto::BanList_BanEntry >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::BanList_BanEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::BanList* Arena::CreateMaybeMessage< ::MumbleProto::BanList >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::BanList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::TextMessage* Arena::CreateMaybeMessage< ::MumbleProto::TextMessage >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::TextMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::PermissionDenied* Arena::CreateMaybeMessage< ::MumbleProto::PermissionDenied >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::PermissionDenied >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ACL_ChanGroup* Arena::CreateMaybeMessage< ::MumbleProto::ACL_ChanGroup >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ACL_ChanGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ACL_ChanACL* Arena::CreateMaybeMessage< ::MumbleProto::ACL_ChanACL >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ACL_ChanACL >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ACL* Arena::CreateMaybeMessage< ::MumbleProto::ACL >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ACL >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::QueryUsers* Arena::CreateMaybeMessage< ::MumbleProto::QueryUsers >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::QueryUsers >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::CryptSetup* Arena::CreateMaybeMessage< ::MumbleProto::CryptSetup >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::CryptSetup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ContextActionModify* Arena::CreateMaybeMessage< ::MumbleProto::ContextActionModify >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ContextActionModify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ContextAction* Arena::CreateMaybeMessage< ::MumbleProto::ContextAction >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ContextAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserList_User* Arena::CreateMaybeMessage< ::MumbleProto::UserList_User >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserList_User >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserList* Arena::CreateMaybeMessage< ::MumbleProto::UserList >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::VoiceTarget_Target* Arena::CreateMaybeMessage< ::MumbleProto::VoiceTarget_Target >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::VoiceTarget_Target >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::VoiceTarget* Arena::CreateMaybeMessage< ::MumbleProto::VoiceTarget >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::VoiceTarget >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::PermissionQuery* Arena::CreateMaybeMessage< ::MumbleProto::PermissionQuery >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::PermissionQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::CodecVersion* Arena::CreateMaybeMessage< ::MumbleProto::CodecVersion >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::CodecVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserStats_Stats* Arena::CreateMaybeMessage< ::MumbleProto::UserStats_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserStats_Stats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::UserStats* Arena::CreateMaybeMessage< ::MumbleProto::UserStats >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::UserStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::RequestBlob* Arena::CreateMaybeMessage< ::MumbleProto::RequestBlob >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::RequestBlob >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::ServerConfig* Arena::CreateMaybeMessage< ::MumbleProto::ServerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::ServerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::SuggestConfig* Arena::CreateMaybeMessage< ::MumbleProto::SuggestConfig >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::SuggestConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MumbleProto::PluginDataTransmission* Arena::CreateMaybeMessage< ::MumbleProto::PluginDataTransmission >(Arena* arena) {
  return Arena::CreateInternal< ::MumbleProto::PluginDataTransmission >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
